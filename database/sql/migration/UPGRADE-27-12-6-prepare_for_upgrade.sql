
--Проверка дубликатов----------------------------------------------------

select *  

from CFG.OPERATION 

where CODE_NAME in ( 

    select CODE_NAME 

    from CFG.OPERATION 

    group by CODE_NAME 

    having count(*) > 1 

); 

 

select *  

from CFG.ACTOR 

where CODE_NAME in ( 

    select CODE_NAME 

    from CFG.ACTOR 

    group by CODE_NAME 

    having count(*) > 1 

); 

 

select *  

from CFG.PROCESS_STATE  

where CODE_NAME in ( 

    select CODE_NAME 

    from CFG.PROCESS_STATE 

    group by CODE_NAME 

    having count(*) > 1 

); 

 

select *  

from CFG.PROCESS_TYPE 

where CODE_NAME in ( 

    select CODE_NAME 

    from CFG.PROCESS_TYPE 

    group by CODE_NAME 

    having count(*) > 1 

); 

-------------------------------------------------------------------------

--Проверка битых ссылок на артефакты-------------------------------------

SELECT
	'ORG.AGENT_TRAINING' AS TABLE_NAME,
	a.AGENT_TRAINING_ID AS ID,
	a.PUBLISHED_ARTIFACT_ID AS REFERENCED_ID,
    'PUBLISHED_ARTIFACT_ID' AS REFERENCED_ID_NAME,
	'Referenced entry does not exist' AS FAULT_TYPE
FROM
	ORG.AGENT_TRAINING a
LEFT JOIN CFX.PUBLISHED_ARTIFACT pa ON
	pa.PUBLISHED_ARTIFACT_ID = a.PUBLISHED_ARTIFACT_ID
WHERE
	pa.PUBLISHED_ARTIFACT_ID IS NULL
UNION ALL

SELECT
	'ORG.APPLICATION_USER_GROUP' AS TABLE_NAME,
	a.APPLICATION_USER_GROUP_ID AS ID,
	a.PUBLISHED_ARTIFACT_ID AS REFERENCED_ID,
    'PUBLISHED_ARTIFACT_ID' AS REFERENCED_ID_NAME,
	'Referenced entry does not exist' AS FAULT_TYPE
FROM
	ORG.APPLICATION_USER_GROUP a
LEFT JOIN CFX.PUBLISHED_ARTIFACT pa ON
	pa.PUBLISHED_ARTIFACT_ID = a.PUBLISHED_ARTIFACT_ID
WHERE
	pa.PUBLISHED_ARTIFACT_ID IS NULL
UNION ALL

SELECT
	'BFX.ATTACHMENT_TYPE' AS TABLE_NAME,
	a.ATTACHMENT_TYPE_ID AS ID,
	a.PUBLISHED_ARTIFACT_ID AS REFERENCED_ID,
    'PUBLISHED_ARTIFACT_ID' AS REFERENCED_ID_NAME,
	'Referenced entry does not exist' AS FAULT_TYPE
FROM
	BFX.ATTACHMENT_TYPE a
LEFT JOIN CFX.PUBLISHED_ARTIFACT pa ON
	pa.PUBLISHED_ARTIFACT_ID = a.PUBLISHED_ARTIFACT_ID
WHERE
	pa.PUBLISHED_ARTIFACT_ID IS NULL
UNION ALL

SELECT
	'BFX.CODE_TABLE_ITEM_HISTORY' AS TABLE_NAME,
	a.CODE_TABLE_ITEM_HISTORY_ID AS ID,
	a.PUBLISHED_ARTIFACT_ID AS REFERENCED_ID,
    'PUBLISHED_ARTIFACT_ID' AS REFERENCED_ID_NAME,
	'Referenced entry does not exist' AS FAULT_TYPE
FROM
	BFX.CODE_TABLE_ITEM_HISTORY a
LEFT JOIN CFX.PUBLISHED_ARTIFACT pa ON
	pa.PUBLISHED_ARTIFACT_ID = a.PUBLISHED_ARTIFACT_ID
WHERE
	pa.PUBLISHED_ARTIFACT_ID IS NULL
UNION ALL

SELECT
	'BFX.HIERARCHICAL_CODE_TABLE_ITEM_HISTORY' AS TABLE_NAME,
	a.HIERARCHICAL_CODE_TABLE_ITEM_HISTORY_ID AS ID,
	a.PUBLISHED_ARTIFACT_ID AS REFERENCED_ID,
    'PUBLISHED_ARTIFACT_ID' AS REFERENCED_ID_NAME,
	'Referenced entry does not exist' AS FAULT_TYPE
FROM
	BFX.HIERARCHICAL_CODE_TABLE_ITEM_HISTORY a
LEFT JOIN CFX.PUBLISHED_ARTIFACT pa ON
	pa.PUBLISHED_ARTIFACT_ID = a.PUBLISHED_ARTIFACT_ID
WHERE
	pa.PUBLISHED_ARTIFACT_ID IS NULL
UNION ALL

SELECT
	'BFX.NOTIFICATION_JOURNAL' AS TABLE_NAME,
	a.NOTIFICATION_ID AS ID,
	a.PUBLISHED_ARTIFACT_ID AS REFERENCED_ID,
    'PUBLISHED_ARTIFACT_ID' AS REFERENCED_ID_NAME,
	'Referenced entry does not exist' AS FAULT_TYPE
FROM
	BFX.NOTIFICATION_JOURNAL a
LEFT JOIN CFX.PUBLISHED_ARTIFACT pa ON
	pa.PUBLISHED_ARTIFACT_ID = a.PUBLISHED_ARTIFACT_ID
WHERE
	pa.PUBLISHED_ARTIFACT_ID IS NULL
	OR a.PUBLISHED_ARTIFACT_ID IS NULL
UNION ALL

SELECT
	'BFX.NOTIFICATION_JOURNAL' AS TABLE_NAME,
	a.NOTIFICATION_ID AS ID,
	a.PUBLISHED_ARTIFACT_ID AS REFERENCED_ID,
    'PUBLISHED_ARTIFACT_ID' AS REFERENCED_ID_NAME,
	'Referenced id is null' AS FAULT_TYPE
FROM
	BFX.NOTIFICATION_JOURNAL a
WHERE
	a.PUBLISHED_ARTIFACT_ID IS NULL
UNION ALL

SELECT
	'BFX.NOTIFICATION_MAILBOX' AS TABLE_NAME,
	a.NOTIFICATION_ID AS ID,
	a.PUBLISHED_ARTIFACT_ID AS REFERENCED_ID,
    'PUBLISHED_ARTIFACT_ID' AS REFERENCED_ID_NAME,
	'Referenced entry does not exist' AS FAULT_TYPE
FROM
	BFX.NOTIFICATION_MAILBOX a
LEFT JOIN CFX.PUBLISHED_ARTIFACT pa ON
	pa.PUBLISHED_ARTIFACT_ID = a.PUBLISHED_ARTIFACT_ID
WHERE
	pa.PUBLISHED_ARTIFACT_ID IS NULL
UNION ALL

SELECT
	'ORG.ORGANISATION_UNIT' AS TABLE_NAME,
	a.ORGANISATION_UNIT_ID AS ID,
	a.PUBLISHED_ARTIFACT_ID AS REFERENCED_ID,
    'PUBLISHED_ARTIFACT_ID' AS REFERENCED_ID_NAME,
	'Referenced entry does not exist' AS FAULT_TYPE
FROM
	ORG.ORGANISATION_UNIT a
LEFT JOIN CFX.PUBLISHED_ARTIFACT pa ON
	pa.PUBLISHED_ARTIFACT_ID = a.PUBLISHED_ARTIFACT_ID
WHERE
	pa.PUBLISHED_ARTIFACT_ID IS NULL
UNION ALL

SELECT
	'ORG.SERVICE_PROVIDER' AS TABLE_NAME,
	a.SERVICE_PROVIDER_ID AS ID,
	a.PUBLISHED_ARTIFACT_ID AS REFERENCED_ID,
    'PUBLISHED_ARTIFACT_ID' AS REFERENCED_ID_NAME,
	'Referenced entry does not exist' AS FAULT_TYPE
FROM
	ORG.SERVICE_PROVIDER a
LEFT JOIN CFX.PUBLISHED_ARTIFACT pa ON
	pa.PUBLISHED_ARTIFACT_ID = a.PUBLISHED_ARTIFACT_ID
WHERE
	pa.PUBLISHED_ARTIFACT_ID IS NULL
UNION ALL

SELECT
	'ORG.SERVICE_PROVIDER_HISTORY' AS TABLE_NAME,
	a.SERVICE_PROVIDER_HISTORY_ID AS ID,
	a.PUBLISHED_ARTIFACT_ID AS REFERENCED_ID,
    'PUBLISHED_ARTIFACT_ID' AS REFERENCED_ID_NAME,
	'Referenced entry does not exist' AS FAULT_TYPE
FROM
	ORG.SERVICE_PROVIDER_HISTORY a
LEFT JOIN CFX.PUBLISHED_ARTIFACT pa ON
	pa.PUBLISHED_ARTIFACT_ID = a.PUBLISHED_ARTIFACT_ID
WHERE
	pa.PUBLISHED_ARTIFACT_ID IS NULL

-------------------------------------------------------------------------

--Удалить битые записи из таблицы логов нотификаций, если присутствуют в скрипте проверки----------------------

DELETE FROM BFX.NOTIFICATION_JOURNAL WHERE PUBLISHED_ARTIFACT_ID IS NULL

---------------------------------------------------------------------------------------------------------------