DROP TABLE IF EXISTS [PAS_IMPL].[UL_PRODUCTS]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_PRODUCTS_HISTORY]
GO
DROP TRIGGER IF EXISTS [PAS_IMPL].[UL_PRODUCTS_HISTORY_TRIGGER]
GO
DROP VIEW IF EXISTS [PAS_IMPL].[UL_PRODUCTS_VIEW]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_INVESTMENT_OBSERVATION_DATES]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_INVESTMENT_OBSERVATION_DATES_HISTORY]
GO
DROP TRIGGER IF EXISTS [PAS_IMPL].[UL_INVESTMENT_OBSERVATION_DATES_HISTORY_TRIGGER]
GO
DROP VIEW IF EXISTS [PAS_IMPL].[UL_INVESTMENT_OBSERVATION_DATES_VIEW]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_PRODUCT_VERSION]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_PRODUCT_VERSION_HISTORY]
GO
DROP TRIGGER IF EXISTS [PAS_IMPL].[UL_PRODUCT_VERSION_HISTORY_TRIGGER]
GO
DROP VIEW IF EXISTS [PAS_IMPL].[UL_PRODUCT_VERSION_VIEW]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_GUARANTEE_FUND]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_GUARANTEE_FUND_HISTORY]
GO
DROP TRIGGER IF EXISTS [PAS_IMPL].[UL_GUARANTEE_FUND_HISTORY_TRIGGER]
GO
DROP VIEW IF EXISTS [PAS_IMPL].[UL_GUARANTEE_FUND_VIEW]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_PIP_GF]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_PIP_GF_HISTORY]
GO
DROP TRIGGER IF EXISTS [PAS_IMPL].[UL_PIP_GF_HISTORY_TRIGGER]
GO
DROP VIEW IF EXISTS [PAS_IMPL].[UL_PIP_GF_VIEW]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_RATE_MIX]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_RATE_MIX_HISTORY]
GO
DROP TRIGGER IF EXISTS [PAS_IMPL].[UL_RATE_MIX_HISTORY_TRIGGER]
GO
DROP VIEW IF EXISTS [PAS_IMPL].[UL_RATE_MIX_VIEW]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_RATES]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_RATES_HISTORY]
GO
DROP TRIGGER IF EXISTS [PAS_IMPL].[UL_RATES_HISTORY_TRIGGER]
GO
DROP VIEW IF EXISTS [PAS_IMPL].[UL_RATES_VIEW]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_GUARANTEES]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_GUARANTEES_HISTORY]
GO
DROP TRIGGER IF EXISTS [PAS_IMPL].[UL_GUARANTEES_HISTORY_TRIGGER]
GO
DROP VIEW IF EXISTS [PAS_IMPL].[UL_GUARANTEES_VIEW]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_GUARANTEE_DATES]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_GUARANTEE_DATES_HISTORY]
GO
DROP TRIGGER IF EXISTS [PAS_IMPL].[UL_GUARANTEE_DATES_HISTORY_TRIGGER]
GO
DROP VIEW IF EXISTS [PAS_IMPL].[UL_GUARANTEE_DATES_VIEW]
GO
DROP TABLE  IF EXISTS [PAS_IMPL].[UL_RISK_FUND]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_RISK_FUND_HISTORY]
GO
DROP TRIGGER IF EXISTS [PAS_IMPL].[UL_RISK_FUND_HISTORY_TRIGGER]
GO
DROP VIEW IF EXISTS [PAS_IMPL].[UL_RISK_FUND_VIEW]
GO
DROP TABLE  IF EXISTS [PAS_IMPL].[UL_RISK_FUND_GROUP]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_RISK_FUND_GROUP_HISTORY]
GO
DROP TRIGGER IF EXISTS [PAS_IMPL].[UL_RISK_FUND_GROUP_HISTORY_TRIGGER]
GO
DROP VIEW IF EXISTS [PAS_IMPL].[UL_RISK_FUND_GROUP_VIEW]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_CASH]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_CASH_HISTORY]
GO
DROP TRIGGER IF EXISTS [PAS_IMPL].[UL_CASH_HISTORY_TRIGGER]
GO
DROP VIEW IF EXISTS [PAS_IMPL].[UL_CASH_VIEW]
GO
DROP TABLE  IF EXISTS [PAS_IMPL].[UL_PIP_RF]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_PIP_RF_HISTORY]
GO
DROP TRIGGER IF EXISTS [PAS_IMPL].[UL_PIP_RF_HISTORY_TRIGGER]
GO
DROP VIEW IF EXISTS [PAS_IMPL].[UL_PIP_RF_VIEW]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_PAY_OFF]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_PAY_OFF_HISTORY]
GO
DROP TRIGGER IF EXISTS [PAS_IMPL].[UL_PAY_OFF_HISTORY_TRIGGER]
GO
DROP VIEW IF EXISTS [PAS_IMPL].[UL_PAY_OFF_VIEW]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_BARRIER_TYPE]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_BARRIER_TYPE_HISTORY]
GO
DROP TRIGGER IF EXISTS [PAS_IMPL].[UL_BARRIER_TYPE_HISTORY_TRIGGER]
GO
DROP VIEW IF EXISTS [PAS_IMPL].[UL_BARRIER_TYPE_VIEW]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_OBSERVATION_BARRIER]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_OBSERVATION_BARRIER_HISTORY]
GO
DROP TRIGGER IF EXISTS [PAS_IMPL].[UL_OBSERVATION_BARRIER_HISTORY_TRIGGER]
GO
DROP VIEW IF EXISTS [PAS_IMPL].[UL_OBSERVATION_BARRIER_VIEW]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_BASIC_ASSETS]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_BASIC_ASSETS_HISTORY]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_BASIC_ASSETS_GROUP]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_BASIC_ASSETS_GROUP_HISTORY]
GO
DROP TRIGGER IF EXISTS [PAS_IMPL].[UL_BASIC_ASSETS_GROUP_HISTORY_TRIGGER]
GO
DROP VIEW IF EXISTS [PAS_IMPL].[UL_BASIC_ASSETS_GROUP_VIEW]
GO
DROP TRIGGER IF EXISTS [PAS_IMPL].[UL_BASIC_ASSETS_HISTORY_TRIGGER]
GO
DROP VIEW IF EXISTS [PAS_IMPL].[UL_BASIC_ASSETS_VIEW]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_TOOLS]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_TOOLS_HISTORY]
GO
DROP TRIGGER IF EXISTS [PAS_IMPL].[UL_TOOLS_HISTORY_TRIGGER]
GO
DROP VIEW IF EXISTS [PAS_IMPL].[UL_TOOLS_VIEW]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_STOCKS]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_STOCKS_HISTORY]
GO
DROP TRIGGER IF EXISTS [PAS_IMPL].[UL_STOCKS_HISTORY_TRIGGER]
GO
DROP VIEW IF EXISTS [PAS_IMPL].[UL_STOCKS_VIEW]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_HISTORICAL_PROFITABILITY]
GO
DROP TABLE IF EXISTS [PAS_IMPL].[UL_HISTORICAL_PROFITABILITY_HISTORY]
GO
DROP TRIGGER IF EXISTS [PAS_IMPL].[UL_HISTORICAL_PROFITABILITY_HISTORY_TRIGGER]
GO
DROP VIEW IF EXISTS [PAS_IMPL].[UL_HISTORICAL_PROFITABILITY_VIEW]
GO
-- CREATE TABLE UL_OBSERVATION_BARRIER
CREATE TABLE [PAS_IMPL].[UL_OBSERVATION_BARRIER]
(
	[OBSERVATION_BARRIER_ID] [UNIQUEIDENTIFIER],
	[CHECK_NUMBER] [INT],
	[BARRIER_NAME] [NVARCHAR](255),
	[BARRIER_VALUE_PERS] [DECIMAL](15,6),
	[PIP_COUPON] [NVARCHAR](255),
	CONSTRAINT [PK_UL_OBSERVATION_BARRIER]
PRIMARY KEY CLUSTERED ([OBSERVATION_BARRIER_ID] ASC)
)
GO

-- CREATE HISTORY TABLE
CREATE TABLE [PAS_IMPL].[UL_OBSERVATION_BARRIER_HISTORY]
(
	[OBSERVATION_BARRIER_HISTORY_ID] [UNIQUEIDENTIFIER],
	[OBSERVATION_BARRIER_ID] [UNIQUEIDENTIFIER],
	[CHECK_NUMBER] [INT],
	[BARRIER_NAME] [NVARCHAR](255),
	[BARRIER_VALUE_PERS] [DECIMAL](15,6),
	[PIP_COUPON] [NVARCHAR](255),
	[OPERATION] [NVARCHAR](1),
	CONSTRAINT [PK_UL_OBSERVATION_BARRIER_HISTORY]
PRIMARY KEY CLUSTERED ([OBSERVATION_BARRIER_HISTORY_ID] ASC)
)
GO

-- CREATE TRIGGER
CREATE TRIGGER [PAS_IMPL].[UL_OBSERVATION_BARRIER_HISTORY_TRIGGER]
ON [PAS_IMPL].[UL_OBSERVATION_BARRIER]
AFTER INSERT, UPDATE, DELETE
AS  
BEGIN
	DECLARE @operation NVARCHAR(1)
	IF EXISTS(SELECT *
	FROM inserted)
	  IF EXISTS(SELECT *
	FROM deleted)
	    SELECT @operation = 'U'
	ELSE
	    SELECT @operation = 'I'
	ELSE
		IF EXISTS(SELECT *
	FROM deleted)
    SELECT @operation = 'D'

	DECLARE @observationBarrierId UNIQUEIDENTIFIER;
	DECLARE @checkNumber  INT;
	DECLARE @barrierName  NVARCHAR(255);
	DECLARE @barrierValuePers  DECIMAL(15,6);
	DECLARE @pipCoupon  NVARCHAR(255);
	
	IF @operation != 'D'
	
		SELECT @observationBarrierId = OBSERVATION_BARRIER_ID, @checkNumber = CHECK_NUMBER, @barrierName = BARRIER_NAME, @barrierValuePers = BARRIER_VALUE_PERS, @pipCoupon = PIP_COUPON
	FROM inserted
	ELSE 
		SELECT @observationBarrierId = OBSERVATION_BARRIER_ID, @checkNumber = CHECK_NUMBER, @barrierName = BARRIER_NAME, @barrierValuePers = BARRIER_VALUE_PERS, @pipCoupon = PIP_COUPON
	FROM deleted

	INSERT INTO PAS_IMPL.UL_OBSERVATION_BARRIER_HISTORY
		(OBSERVATION_BARRIER_HISTORY_ID, OBSERVATION_BARRIER_ID, CHECK_NUMBER, BARRIER_NAME, BARRIER_VALUE_PERS, PIP_COUPON, OPERATION)
	VALUES
		(NEWID(), @observationBarrierId, @checkNumber, @barrierName, @barrierValuePers, @pipCoupon, @operation)
END

SET QUOTED_IDENTIFIER ON
GO

-- CREATE VIEW
CREATE VIEW [PAS_IMPL].[UL_OBSERVATION_BARRIER_VIEW]
AS
	SELECT
		[OBSERVATION_BARRIER_ID] AS OBSERVATION_BARRIER_ID,
		[CHECK_NUMBER] AS CHECK_NUMBER,
		[BARRIER_NAME] AS BARRIER_NAME,
		[BARRIER_VALUE_PERS] AS BARRIER_VALUE_PERS,
		[PIP_COUPON] AS PIP_COUPON
	FROM [PAS_IMPL].[UL_OBSERVATION_BARRIER]
GO
-- CREATE TABLE UL_BARRIER_TYPE
CREATE TABLE [PAS_IMPL].[UL_BARRIER_TYPE]
(
	[BARRIER_TYPE_ID] [UNIQUEIDENTIFIER],
	[BARRIER_NAME] [NVARCHAR](255),
	[OBSERVATION_FREQUENCY] [NVARCHAR](255),
	[MORATORIUM_END_CHECK_NUMBER] [INT]
		CONSTRAINT [PK_UL_BARRIER_NAME]
PRIMARY KEY CLUSTERED ([BARRIER_TYPE_ID] ASC)
)
GO

-- CREATE HISTORY TABLE
CREATE TABLE [PAS_IMPL].[UL_BARRIER_TYPE_HISTORY]
(
	[BARRIER_TYPE_HISTORY_ID] [UNIQUEIDENTIFIER],
	[BARRIER_TYPE_ID] [UNIQUEIDENTIFIER],
	[BARRIER_NAME] [NVARCHAR](255),
	[OBSERVATION_FREQUENCY] [NVARCHAR](255),
	[MORATORIUM_END_CHECK_NUMBER] [INT],
	[OPERATION] [NVARCHAR](1),
	CONSTRAINT [PK_UL_BARRIER_NAME_HISTORY]
PRIMARY KEY CLUSTERED ([BARRIER_TYPE_HISTORY_ID] ASC)
)
GO

-- CREATE TRIGGER
CREATE TRIGGER [PAS_IMPL].[UL_BARRIER_TYPE_HISTORY_TRIGGER]
ON [PAS_IMPL].[UL_BARRIER_TYPE]
AFTER INSERT, UPDATE, DELETE
AS  
BEGIN
	DECLARE @operation NVARCHAR(1)
	IF EXISTS(SELECT *
	FROM inserted)
	  IF EXISTS(SELECT *
	FROM deleted)
	    SELECT @operation = 'U'
	ELSE
	    SELECT @operation = 'I'
	ELSE
		IF EXISTS(SELECT *
	FROM deleted)
    SELECT @operation = 'D'

	DECLARE @barrierTypeId UNIQUEIDENTIFIER;
	DECLARE @barrierName NVARCHAR(255);
	DECLARE @observationFrequency NVARCHAR(255);
	DECLARE @moratoriumEndCheckNumber INT;

	IF @operation != 'D'
	
		SELECT @barrierTypeId = BARRIER_TYPE_ID, @barrierName = BARRIER_NAME, @observationFrequency = OBSERVATION_FREQUENCY, @moratoriumEndCheckNumber = MORATORIUM_END_CHECK_NUMBER
	FROM inserted
	ELSE 
		SELECT @barrierTypeId = BARRIER_TYPE_ID, @barrierName = BARRIER_NAME, @observationFrequency = OBSERVATION_FREQUENCY, @moratoriumEndCheckNumber = MORATORIUM_END_CHECK_NUMBER
	FROM deleted

	INSERT INTO PAS_IMPL.UL_BARRIER_TYPE_HISTORY
		(BARRIER_TYPE_HISTORY_ID, BARRIER_TYPE_ID, BARRIER_NAME, OBSERVATION_FREQUENCY, MORATORIUM_END_CHECK_NUMBER, OPERATION)
	VALUES
		(NEWID(), @barrierTypeId, @barrierName, @observationFrequency, @moratoriumEndCheckNumber, @operation)
END

SET QUOTED_IDENTIFIER ON
GO

-- CREATE VIEW
CREATE VIEW [PAS_IMPL].[UL_BARRIER_TYPE_VIEW]
AS
	SELECT
		[BARRIER_TYPE_ID] AS BARRIER_TYPE_ID,
		[BARRIER_NAME] AS BARRIER_NAME,
		[OBSERVATION_FREQUENCY] AS OBSERVATION_FREQUENCY,
		[MORATORIUM_END_CHECK_NUMBER] AS MORATORIUM_END_CHECK_NUMBER
	FROM [PAS_IMPL].[UL_BARRIER_TYPE]
GO
-- CREATE TABLE UL_PAY_OFF
CREATE TABLE [PAS_IMPL].[UL_PAY_OFF]
(
	[PAY_OFF_ID] [UNIQUEIDENTIFIER],
	[PAY_OFF_TYPE] [NVARCHAR](255),
	[TERM] [INT],
	[STRIKE] [DECIMAL](15,6),
	[GUARAN_COUPON] [NVARCHAR](255),
	[ADDITIONAL_INCOME] [NVARCHAR](255),
	[BARRIER_TYPE_ID] [UNIQUEIDENTIFIER],
	[OBSERVATION_BARRIER_ID] [UNIQUEIDENTIFIER],
	[PROTECTION_TYPE][NVARCHAR](255),
	CONSTRAINT [PK_UL_PAY_OFF]
PRIMARY KEY CLUSTERED ([PAY_OFF_ID] ASC)
)
GO

ALTER TABLE [PAS_IMPL].[UL_PAY_OFF] WITH CHECK ADD CONSTRAINT [FK_PAS_IMPL_UL_PAY_OFF_BARRIER_TYPE_ID] FOREIGN KEY([BARRIER_TYPE_ID])
REFERENCES [PAS_IMPL].[UL_BARRIER_TYPE] ([BARRIER_TYPE_ID])
GO

ALTER TABLE [PAS_IMPL].[UL_PAY_OFF] WITH CHECK ADD CONSTRAINT [FK_PAS_IMPL_UL_PAY_OFF_OBSERVATION_BARRIER_ID] FOREIGN KEY([OBSERVATION_BARRIER_ID])
REFERENCES [PAS_IMPL].[UL_OBSERVATION_BARRIER] ([OBSERVATION_BARRIER_ID])
GO

-- CREATE HISTORY TABLE
CREATE TABLE [PAS_IMPL].[UL_PAY_OFF_HISTORY]
(
	[PAY_OFF_HISTORY_ID] [UNIQUEIDENTIFIER],
	[PAY_OFF_ID] [UNIQUEIDENTIFIER],
	[PAY_OFF_TYPE] [NVARCHAR](255),
	[TERM] [INT],
	[STRIKE] [DECIMAL](15,6),
	[GUARAN_COUPON] [NVARCHAR](255),
	[ADDITIONAL_INCOME] [NVARCHAR](255),
	[BARRIER_TYPE_ID] [UNIQUEIDENTIFIER],
	[OBSERVATION_BARRIER_ID] [UNIQUEIDENTIFIER],
	[PROTECTION_TYPE][NVARCHAR](255),
	[OPERATION] [NVARCHAR](1),
	CONSTRAINT [PK_UL_PAY_OFF_HISTORY]
PRIMARY KEY CLUSTERED ([PAY_OFF_HISTORY_ID] ASC)
)
GO

-- CREATE TRIGGER
CREATE TRIGGER [PAS_IMPL].[UL_PAY_OFF_HISTORY_TRIGGER]
ON [PAS_IMPL].[UL_PAY_OFF]
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
	DECLARE @operation NVARCHAR(1)
	IF EXISTS(SELECT *
	FROM inserted)
	  IF EXISTS(SELECT *
	FROM deleted)
	    SELECT @operation = 'U'
	ELSE
	    SELECT @operation = 'I'
	ELSE
		IF EXISTS(SELECT *
	FROM deleted)
    SELECT @operation = 'D'

	DECLARE @payOffId UNIQUEIDENTIFIER;
	DECLARE @payOffType NVARCHAR(255);
	DECLARE @term INT;
	DECLARE @strike DECIMAL(15,6);
	DECLARE @guaranCoupon NVARCHAR(255);
	DECLARE @additionalIncome NVARCHAR(255);
	DECLARE @barrierTypeId UNIQUEIDENTIFIER;
	DECLARE @observationBarrierId UNIQUEIDENTIFIER;
	DECLARE @protectionType NVARCHAR(255);

	IF @operation != 'D'

		SELECT @payOffId = PAY_OFF_ID, @payOffType = PAY_OFF_TYPE, @term = TERM, @strike = STRIKE, @guaranCoupon = GUARAN_COUPON, @additionalIncome = ADDITIONAL_INCOME, @barrierTypeId = BARRIER_TYPE_ID, @observationBarrierId = OBSERVATION_BARRIER_ID, @protectionType = PROTECTION_TYPE
	FROM inserted
	ELSE
		SELECT @payOffId = PAY_OFF_ID, @payOffType = PAY_OFF_TYPE, @term = TERM, @strike = STRIKE, @guaranCoupon = GUARAN_COUPON, @additionalIncome = ADDITIONAL_INCOME, @barrierTypeId = BARRIER_TYPE_ID, @observationBarrierId = OBSERVATION_BARRIER_ID, @protectionType = PROTECTION_TYPE
	FROM deleted

	INSERT INTO PAS_IMPL.UL_PAY_OFF_HISTORY
		(PAY_OFF_HISTORY_ID, PAY_OFF_ID, PAY_OFF_TYPE, TERM, STRIKE, GUARAN_COUPON, ADDITIONAL_INCOME, BARRIER_TYPE_ID, OBSERVATION_BARRIER_ID, PROTECTION_TYPE, OPERATION)
	VALUES
		(NEWID(), @payOffId, @payOffType, @term, @strike, @guaranCoupon, @additionalIncome, @barrierTypeId , @observationBarrierId, @protectionType, @operation)
END

SET QUOTED_IDENTIFIER ON
GO

-- CREATE VIEW
CREATE VIEW [PAS_IMPL].[UL_PAY_OFF_VIEW]
AS
	SELECT
		[PAY_OFF_ID] AS PAY_OFF_ID,
		[PAY_OFF_TYPE] AS PAY_OFF_TYPE,
		[TERM] AS TERM,
		[STRIKE] AS STRIKE,
		[GUARAN_COUPON] AS GUARAN_COUPON,
		[ADDITIONAL_INCOME] AS ADDITIONAL_INCOME,
		[BARRIER_TYPE_ID] AS BARRIER_TYPE_ID,
		[OBSERVATION_BARRIER_ID] AS OBSERVATION_BARRIER_ID,
		[PROTECTION_TYPE] AS PROTECTION_TYPE
	FROM [PAS_IMPL].[UL_PAY_OFF]
GO
-- CREATE TABLE UL_STOCKS
CREATE TABLE [PAS_IMPL].[UL_STOCKS]
(
	[MIC] [NVARCHAR](255),
	[OPERATING_MIC] [NVARCHAR](255),
	[OPRT_SGMT] [NVARCHAR](255),
	[MARKET_NAME] [NVARCHAR](255),
	[ISO_COUNTRY_CODE] [NVARCHAR](255),
	[CITY] [NVARCHAR](255),
	[WEBSITE] [NVARCHAR](255),
	[STATUS] [NVARCHAR](255),
	[COMMENTS] [NVARCHAR](255)
		CONSTRAINT [PK_UL_STOCKS]
PRIMARY KEY CLUSTERED ([MIC] ASC)
)
GO

-- CREATE HISTORY TABLE
CREATE TABLE [PAS_IMPL].[UL_STOCKS_HISTORY]
(
	[STOCK_HISTORY_ID] [UNIQUEIDENTIFIER],
	[MIC] [NVARCHAR](255),
	[OPERATING_MIC] [NVARCHAR](255),
	[OPRT_SGMT] [NVARCHAR](255),
	[MARKET_NAME] [NVARCHAR](255),
	[ISO_COUNTRY_CODE] [NVARCHAR](255),
	[CITY] [NVARCHAR](255),
	[WEBSITE] [NVARCHAR](255),
	[STATUS] [NVARCHAR](255),
	[COMMENTS] [NVARCHAR](255),
	[OPERATION] [NVARCHAR](1),
	CONSTRAINT [PK_UL_STOCKS_HISTORY]
PRIMARY KEY CLUSTERED ([STOCK_HISTORY_ID] ASC)
)
GO

-- CREATE TRIGGER
CREATE TRIGGER [PAS_IMPL].[UL_STOCKS_HISTORY_TRIGGER]
ON [PAS_IMPL].[UL_STOCKS]
AFTER INSERT, UPDATE, DELETE
AS  
BEGIN
	DECLARE @operation NVARCHAR(1)
	IF EXISTS(SELECT *
	FROM inserted)
	  IF EXISTS(SELECT *
	FROM deleted)
	    SELECT @operation = 'U'
	ELSE
	    SELECT @operation = 'I'
	ELSE
		IF EXISTS(SELECT *
	FROM deleted)
    SELECT @operation = 'D'

	DECLARE @mic [NVARCHAR](255);
	DECLARE @operating_mic [NVARCHAR](255);
	DECLARE @oprt_sgmt [NVARCHAR](255);
	DECLARE @marketName [NVARCHAR](255);
	DECLARE @iso_country_code [NVARCHAR](255);
	DECLARE @city [NVARCHAR](255);
	DECLARE @website [NVARCHAR](255);
	DECLARE @status [NVARCHAR](255);
	DECLARE @comments [NVARCHAR](255);

	IF @operation != 'D'
	
		SELECT @mic = MIC, @operating_mic = OPERATING_MIC, @oprt_sgmt = OPRT_SGMT, @marketName = MARKET_NAME, @iso_country_code = ISO_COUNTRY_CODE, @city = CITY, @website = WEBSITE, @status = STATUS, @comments = COMMENTS
	FROM inserted
	ELSE 
		SELECT @mic = MIC, @operating_mic = OPERATING_MIC, @oprt_sgmt = OPRT_SGMT, @marketName = MARKET_NAME, @iso_country_code = ISO_COUNTRY_CODE, @city = CITY, @website = WEBSITE, @status = STATUS, @comments = COMMENTS
	FROM deleted

	INSERT INTO PAS_IMPL.UL_STOCKS_HISTORY
		(STOCK_HISTORY_ID, MIC, OPERATING_MIC, OPRT_SGMT, MARKET_NAME, ISO_COUNTRY_CODE, CITY, WEBSITE, STATUS, COMMENTS, OPERATION)
	VALUES
		(NEWID(), @mic, @operating_mic, @oprt_sgmt, @marketName, @iso_country_code, @city, @website, @status, @comments, @operation)
END

SET QUOTED_IDENTIFIER ON
GO

-- CREATE VIEW
CREATE VIEW [PAS_IMPL].[UL_STOCKS_VIEW]
AS
	SELECT
		[MIC] AS MIC,
		[OPERATING_MIC] AS OPERATING_MIC,
		[OPRT_SGMT] AS OPRT_SGMT,
		[MARKET_NAME] AS MARKET,
		[ISO_COUNTRY_CODE] AS ISO_COUNTRY_CODE,
		[CITY] AS CITY,
		[WEBSITE] AS WEBSITE,
		[STATUS] AS STATUS,
		[COMMENTS] AS COMMENTS
	FROM [PAS_IMPL].[UL_STOCKS]
GO
-- CREATE TABLE UL_TOOLS
CREATE TABLE [PAS_IMPL].[UL_TOOLS]
(
	[TOOL_ID] [UNIQUEIDENTIFIER],
	[TOOL_NAME] [NVARCHAR](255),
	[STOCK_TICKER] [NVARCHAR](255),
	[ISIN] [NVARCHAR](255),
	[TARIFF_RATE_CURRENCY] [NVARCHAR](255),
	[STOCK_NAME] [NVARCHAR](255),
	[MIC] [NVARCHAR](255),
	[ADDITIONAL_INCOME] [NVARCHAR](255),
	[TOOL_TYPE] [NVARCHAR](255),
	[TICKER_BLOOMBERG] [NVARCHAR](255),
	[NUMBER_CBONDS] [NVARCHAR](255)
		CONSTRAINT [PK_UL_TOOLS]
PRIMARY KEY CLUSTERED ([TOOL_ID] ASC)
)
GO

ALTER TABLE [PAS_IMPL].[UL_TOOLS]  WITH CHECK ADD  CONSTRAINT [FK_PAS_IMPL_UL_TOOLS_MIC] FOREIGN KEY([MIC])
REFERENCES [PAS_IMPL].[UL_STOCKS] ([MIC])
GO


-- CREATE HISTORY TABLE
CREATE TABLE [PAS_IMPL].[UL_TOOLS_HISTORY]
(
	[TOOL_HISTORY_ID] [UNIQUEIDENTIFIER],
	[TOOL_ID] [UNIQUEIDENTIFIER],
	[TOOL_NAME] [NVARCHAR](255),
	[STOCK_TICKER] [NVARCHAR](255),
	[ISIN] [NVARCHAR](255),
	[TARIFF_RATE_CURRENCY] [NVARCHAR](255),
	[STOCK_NAME] [NVARCHAR](255),
	[MIC] [NVARCHAR](255),
	[ADDITIONAL_INCOME] [NVARCHAR](255),
	[TOOL_TYPE] [NVARCHAR](255),
	[TICKER_BLOOMBERG] [NVARCHAR](255),
	[NUMBER_CBONDS] [NVARCHAR](255),
	[OPERATION] [NVARCHAR](1),
	CONSTRAINT [PK_UL_TOOLS_HISTORY]
PRIMARY KEY CLUSTERED ([TOOL_HISTORY_ID] ASC)
)
GO

-- CREATE TRIGGER
CREATE TRIGGER [PAS_IMPL].[UL_TOOLS_HISTORY_TRIGGER]
ON [PAS_IMPL].[UL_TOOLS]
AFTER INSERT, UPDATE, DELETE
AS  
BEGIN
	DECLARE @operation NVARCHAR(1)
	IF EXISTS(SELECT *
	FROM inserted)
	  IF EXISTS(SELECT *
	FROM deleted)
	    SELECT @operation = 'U'
	ELSE
	    SELECT @operation = 'I'
	ELSE
		IF EXISTS(SELECT *
	FROM deleted)
    SELECT @operation = 'D'

	DECLARE @toolId UNIQUEIDENTIFIER;
	DECLARE @toolName NVARCHAR(255);
	DECLARE @stockTicker NVARCHAR(255);
	DECLARE @isin NVARCHAR(255);
	DECLARE @tariffRateCurrency NVARCHAR(255);
	DECLARE @stockName NVARCHAR(255);
	DECLARE @mic NVARCHAR(255);
	DECLARE @additionalIncome NVARCHAR(255);
	DECLARE @toolType NVARCHAR(255);
	DECLARE @tickerBloomberg NVARCHAR(255);
	DECLARE @numberCbonds NVARCHAR(255);

	IF @operation != 'D'
	
		SELECT @toolId = TOOL_ID, @toolName = TOOL_NAME, @stockTicker = STOCK_TICKER, @isin = ISIN, @tariffRateCurrency = TARIFF_RATE_CURRENCY, @stockName = STOCK_NAME, @mic = MIC, @additionalIncome = ADDITIONAL_INCOME, @toolType = TOOL_TYPE, @tickerBloomberg = TICKER_BLOOMBERG, @numberCbonds = NUMBER_CBONDS
	FROM inserted
	ELSE 
		SELECT @toolId = TOOL_ID, @toolName = TOOL_NAME, @stockTicker = STOCK_TICKER, @isin = ISIN, @tariffRateCurrency = TARIFF_RATE_CURRENCY, @stockName = STOCK_NAME, @mic = MIC, @additionalIncome = ADDITIONAL_INCOME, @toolType = TOOL_TYPE, @tickerBloomberg = TICKER_BLOOMBERG, @numberCbonds = NUMBER_CBONDS
	FROM deleted

	INSERT INTO PAS_IMPL.UL_TOOLS_HISTORY
		(TOOL_HISTORY_ID, TOOL_ID, TOOL_NAME, STOCK_TICKER, ISIN, TARIFF_RATE_CURRENCY, STOCK_NAME, MIC, ADDITIONAL_INCOME, TOOL_TYPE, TICKER_BLOOMBERG, NUMBER_CBONDS, OPERATION)
	VALUES
		(NEWID(), @toolId, @toolName, @stockTicker, @isin, @tariffRateCurrency, @stockName, @mic, @additionalIncome, @toolType, @tickerBloomberg, @numberCbonds, @operation)
END

SET QUOTED_IDENTIFIER ON
GO

-- CREATE VIEW
CREATE VIEW [PAS_IMPL].[UL_TOOLS_VIEW]
AS
	SELECT
		[TOOL_ID] AS TOOL_ID, 
		[TOOL_NAME] AS TOOL_NAME, 
		[STOCK_TICKER] AS STOCK_TICKER,
		[ISIN] AS ISIN, 
		[TARIFF_RATE_CURRENCY] AS TARIFF_RATE_CURRENCY, 
		[STOCK_NAME] AS STOCK_NAME, 
		[MIC] AS MIC, 
		[ADDITIONAL_INCOME] AS ADDITIONAL_INCOME, 
		[TOOL_TYPE] AS TOOL_TYPE, 
		[TICKER_BLOOMBERG] AS TICKER_BLOOMBERG, 
		[NUMBER_CBONDS] AS NUMBER_CBONDS
	FROM [PAS_IMPL].[UL_TOOLS]
GO
-- CREATE TABLE UL_RISK_FUND_GROUP
CREATE TABLE [PAS_IMPL].[UL_BASIC_ASSETS_GROUP]
(
	[BASIC_ASSETS_GROUP_ID] [UNIQUEIDENTIFIER]
		CONSTRAINT [PK_UL_BASIC_ASSETS_GROUP]
PRIMARY KEY CLUSTERED ([BASIC_ASSETS_GROUP_ID] ASC)
)
GO

-- CREATE HISTORY TABLE
CREATE TABLE [PAS_IMPL].[UL_BASIC_ASSETS_GROUP_HISTORY]
(
	[BASIC_ASSETS_GROUP_HISTORY_ID] [UNIQUEIDENTIFIER],
	[BASIC_ASSETS_GROUP_ID] [UNIQUEIDENTIFIER],
	[OPERATION] [NVARCHAR](1),
	CONSTRAINT [PK_UL_BASIC_ASSETS_GROUP_HISTORY]
PRIMARY KEY CLUSTERED ([BASIC_ASSETS_GROUP_HISTORY_ID] ASC)
)
GO

-- CREATE TRIGGER
CREATE TRIGGER [PAS_IMPL].[UL_BASIC_ASSETS_GROUP_HISTORY_TRIGGER]
ON [PAS_IMPL].[UL_BASIC_ASSETS_GROUP]
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
	DECLARE @operation NVARCHAR(1)
	IF EXISTS(SELECT *
	FROM inserted)
	  IF EXISTS(SELECT *
	FROM deleted)
	    SELECT @operation = 'U'
	ELSE
	    SELECT @operation = 'I'
	ELSE
		IF EXISTS(SELECT *
	FROM deleted)
    SELECT @operation = 'D'

	DECLARE @basicAssetsGroupId UNIQUEIDENTIFIER;

	IF @operation != 'D'

		SELECT @basicAssetsGroupId = BASIC_ASSETS_GROUP_ID
	FROM inserted
	ELSE
		SELECT @basicAssetsGroupId = BASIC_ASSETS_GROUP_ID
	FROM deleted

	INSERT INTO PAS_IMPL.UL_BASIC_ASSETS_GROUP_HISTORY
		(BASIC_ASSETS_GROUP_HISTORY_ID, BASIC_ASSETS_GROUP_ID, OPERATION)
	VALUES
		(NEWID(), @basicAssetsGroupId, @operation)
END

SET QUOTED_IDENTIFIER ON
GO

-- CREATE VIEW
CREATE VIEW [PAS_IMPL].[UL_BASIC_ASSETS_GROUP_VIEW]
AS
	SELECT
		[BASIC_ASSETS_GROUP_ID] AS BASIC_ASSETS_GROUP_ID
	FROM [PAS_IMPL].[UL_BASIC_ASSETS_GROUP]
GO
-- CREATE TABLE UL_BASIC_ASSETS
CREATE TABLE [PAS_IMPL].[UL_BASIC_ASSETS]
(
	[BASIC_ASSET_ID] [UNIQUEIDENTIFIER],
	[BASIC_ASSETS_GROUP_ID] [UNIQUEIDENTIFIER],
	[MARKETING_ASSET_NAME] [NVARCHAR](255),
	[TOOL_ID] [UNIQUEIDENTIFIER],
	CONSTRAINT [PK_UL_BASIC_ASSETS]
PRIMARY KEY CLUSTERED ([BASIC_ASSET_ID] ASC)
)
GO

ALTER TABLE [PAS_IMPL].[UL_BASIC_ASSETS]  WITH CHECK ADD  CONSTRAINT [FK_PAS_IMPL_UL_BASIC_ASSETS_TOOL_ID] FOREIGN KEY([TOOL_ID])
REFERENCES [PAS_IMPL].[UL_TOOLS] ([TOOL_ID])
GO

ALTER TABLE [PAS_IMPL].[UL_BASIC_ASSETS]  WITH CHECK ADD  CONSTRAINT [FK_PAS_IMPL_UL_BASIC_ASSETS_GROUP_ID] FOREIGN KEY([BASIC_ASSETS_GROUP_ID])
REFERENCES [PAS_IMPL].[UL_BASIC_ASSETS_GROUP] ([BASIC_ASSETS_GROUP_ID])
GO

-- CREATE HISTORY TABLE
CREATE TABLE [PAS_IMPL].[UL_BASIC_ASSETS_HISTORY]
(
	[BASIC_ASSET_HISTORY_ID] [UNIQUEIDENTIFIER],
	[BASIC_ASSET_ID] [UNIQUEIDENTIFIER],
	[BASIC_ASSETS_GROUP_ID] [UNIQUEIDENTIFIER],
	[MARKETING_ASSET_NAME] [NVARCHAR](255),
	[TOOL_ID] [UNIQUEIDENTIFIER],
	[OPERATION] [NVARCHAR](1),
	CONSTRAINT [PK_UL_BASIC_ASSETS_HISTORY]
PRIMARY KEY CLUSTERED ([BASIC_ASSET_HISTORY_ID] ASC)
)
GO

-- CREATE TRIGGER
CREATE TRIGGER [PAS_IMPL].[UL_BASIC_ASSETS_HISTORY_TRIGGER]
ON [PAS_IMPL].[UL_BASIC_ASSETS]
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
	DECLARE @operation NVARCHAR(1)
	IF EXISTS(SELECT *
	FROM inserted)
	  IF EXISTS(SELECT *
	FROM deleted)
	    SELECT @operation = 'U'
	ELSE
	    SELECT @operation = 'I'
	ELSE
		IF EXISTS(SELECT *
	FROM deleted)
    SELECT @operation = 'D'

	DECLARE @basicAssetId UNIQUEIDENTIFIER;
	DECLARE @basicAssetsGroupId UNIQUEIDENTIFIER;
	DECLARE @marketingAssetName NVARCHAR(255);
	DECLARE @toolId UNIQUEIDENTIFIER;

	IF @operation != 'D'

		SELECT @basicAssetId = BASIC_ASSET_ID, @basicAssetsGroupId = BASIC_ASSETS_GROUP_ID, @marketingAssetName = MARKETING_ASSET_NAME, @toolId = TOOL_ID
	FROM inserted
	ELSE
		SELECT @basicAssetId = BASIC_ASSET_ID, @basicAssetsGroupId = BASIC_ASSETS_GROUP_ID, @marketingAssetName = MARKETING_ASSET_NAME, @toolId = TOOL_ID
	FROM deleted

	INSERT INTO PAS_IMPL.UL_BASIC_ASSETS_HISTORY
		(BASIC_ASSET_HISTORY_ID, BASIC_ASSET_ID, BASIC_ASSETS_GROUP_ID, MARKETING_ASSET_NAME, TOOL_ID, OPERATION)
	VALUES
		(NEWID(), @basicAssetId, @basicAssetsGroupId, @marketingAssetName, @toolId, @operation)
END

SET QUOTED_IDENTIFIER ON
GO

-- CREATE VIEW
CREATE VIEW [PAS_IMPL].[UL_BASIC_ASSETS_VIEW]
AS
	SELECT
		[BASIC_ASSET_ID] AS BASIC_ASSET_ID,
		[BASIC_ASSETS_GROUP_ID] as BASIC_ASSETS_GROUP_ID,
		[MARKETING_ASSET_NAME] AS MARKETING_ASSET_NAME,
		[TOOL_ID] AS TOOL_ID
	FROM [PAS_IMPL].[UL_BASIC_ASSETS]
GO
-- CREATE TABLE UL_PIP_RF
CREATE TABLE [PAS_IMPL].[UL_PIP_RF]
(
	[PIP_RF_ID] [UNIQUEIDENTIFIER],
	[PIP_CATEGORY] [NVARCHAR](255),
	[PAY_OFF_ID] [UNIQUEIDENTIFIER],
	[BASIC_ASSETS_GROUP_ID] [UNIQUEIDENTIFIER],
	[TARIFF_RATE_CURRENCY] [NVARCHAR](255),
	[IS_PIP_QUANTUMED] [NVARCHAR](255),
	[MFEE] [DECIMAL](15,6),
		CONSTRAINT [PK_UL_PIP_RF]
PRIMARY KEY CLUSTERED ([PIP_RF_ID] ASC)
)
GO

ALTER TABLE [PAS_IMPL].[UL_PIP_RF]  WITH CHECK ADD  CONSTRAINT [FK_PAS_IMPL_UL_PIP_RF_BASIC_ASSET_GROUP_ID] FOREIGN KEY([BASIC_ASSETS_GROUP_ID])
REFERENCES [PAS_IMPL].[UL_BASIC_ASSETS_GROUP] ([BASIC_ASSETS_GROUP_ID])
GO


-- CREATE HISTORY TABLE
CREATE TABLE [PAS_IMPL].[UL_PIP_RF_HISTORY]
(
	[PIP_RF_HISTORY_ID] [UNIQUEIDENTIFIER],
	[PIP_RF_ID] [UNIQUEIDENTIFIER],
	[PIP_CATEGORY] [NVARCHAR](255),
	[PAY_OFF_ID] [NVARCHAR](255),
	[BASIC_ASSETS_GROUP_ID] [UNIQUEIDENTIFIER],
	[TARIFF_RATE_CURRENCY] [NVARCHAR](255),
	[IS_PIP_QUANTUMED] [NVARCHAR](255),
	[MFEE] [DECIMAL](15,6),
	[OPERATION] [NVARCHAR](1),
	CONSTRAINT [PK_UL_PIP_RF_HISTORY]
PRIMARY KEY CLUSTERED ([PIP_RF_HISTORY_ID] ASC)
)
GO

-- CREATE TRIGGER
CREATE TRIGGER [PAS_IMPL].[UL_PIP_RF_HISTORY_TRIGGER]
ON [PAS_IMPL].[UL_PIP_RF]
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
	DECLARE @operation NVARCHAR(1)
	IF EXISTS(SELECT *
	FROM inserted)
	  IF EXISTS(SELECT *
	FROM deleted)
	    SELECT @operation = 'U'
	ELSE
	    SELECT @operation = 'I'
	ELSE
		IF EXISTS(SELECT *
	FROM deleted)
    SELECT @operation = 'D'

	DECLARE @pipRfId UNIQUEIDENTIFIER;
	DECLARE @pipCategory NVARCHAR(255);
	DECLARE @payOffId NVARCHAR(255);
	DECLARE @basicAssetsGroupId UNIQUEIDENTIFIER;
	DECLARE @tariffRateCurrency NVARCHAR(255);
	DECLARE @isPipQuantumed NVARCHAR(255);
	DECLARE @mFee DECIMAL(15,6);

	IF @operation != 'D'

		SELECT @pipRfId = PIP_RF_ID, @pipCategory = PIP_CATEGORY, @payOffId = PAY_OFF_ID, @basicAssetsGroupId = BASIC_ASSETS_GROUP_ID, @tariffRateCurrency = TARIFF_RATE_CURRENCY, @isPipQuantumed = IS_PIP_QUANTUMED, @mFee = MFEE
	FROM inserted
	ELSE
		SELECT @pipRfId = PIP_RF_ID, @pipCategory = PIP_CATEGORY, @payOffId = PAY_OFF_ID, @basicAssetsGroupId = BASIC_ASSETS_GROUP_ID, @tariffRateCurrency = TARIFF_RATE_CURRENCY, @isPipQuantumed = IS_PIP_QUANTUMED, @mFee = MFEE
	FROM deleted

	INSERT INTO PAS_IMPL.UL_PIP_RF_HISTORY
		(PIP_RF_HISTORY_ID, PIP_RF_ID, PIP_CATEGORY, PAY_OFF_ID, BASIC_ASSETS_GROUP_ID, TARIFF_RATE_CURRENCY, IS_PIP_QUANTUMED, MFEE, OPERATION)
	VALUES
		(NEWID(), @pipRfId, @pipCategory, @payOffId, @basicAssetsGroupId, @tariffRateCurrency, @isPipQuantumed, @mFee, @operation)
END

SET QUOTED_IDENTIFIER ON
GO

-- CREATE VIEW
CREATE VIEW [PAS_IMPL].[UL_PIP_RF_VIEW]
AS
	SELECT
		[PIP_RF_ID] AS PIP_RF_ID,
		[PIP_CATEGORY] AS PIP_CATEGORY,
		[PAY_OFF_ID] AS PAY_OFF_ID,
		[BASIC_ASSETS_GROUP_ID] AS BASIC_ASSETS_GROUP_ID,
		[TARIFF_RATE_CURRENCY] AS TARIFF_RATE_CURRENCY,
		[IS_PIP_QUANTUMED] AS IS_PIP_QUANTUMED,
		[MFEE] AS MFEE
	FROM [PAS_IMPL].[UL_PIP_RF]
GO
-- CREATE TABLE UL_CASH
CREATE TABLE [PAS_IMPL].[UL_CASH]
(
	[CASH_ID] [UNIQUEIDENTIFIER],
	[CASH_TYPE] [NVARCHAR](255),
	[STARTING_QUOTATION] [DECIMAL](15,6),
	[RATE] [DECIMAL](15,6),
	[CURRENCY] [NVARCHAR](255),
	CONSTRAINT [PK_UL_CASH]
PRIMARY KEY CLUSTERED ([CASH_ID] ASC)
)
GO

-- CREATE HISTORY TABLE
CREATE TABLE [PAS_IMPL].[UL_CASH_HISTORY]
(
	[CASH_HISTORY_ID] [UNIQUEIDENTIFIER],
	[CASH_ID] [UNIQUEIDENTIFIER],
	[CASH_TYPE] [NVARCHAR](255),
	[STARTING_QUOTATION] [DECIMAL](15,6),
	[RATE] [DECIMAL](15,6),
	[CURRENCY] [NVARCHAR](255),
	[OPERATION] [NVARCHAR](1),
	CONSTRAINT [PK_UL_CASH_HISTORY]
PRIMARY KEY CLUSTERED ([CASH_HISTORY_ID] ASC)
)
GO

-- CREATE TRIGGER
CREATE TRIGGER [PAS_IMPL].[UL_CASH_HISTORY_TRIGGER]
ON [PAS_IMPL].[UL_CASH]
AFTER INSERT, UPDATE, DELETE
AS  
BEGIN
	DECLARE @operation NVARCHAR(1)
	IF EXISTS(SELECT *
	FROM inserted)
	  IF EXISTS(SELECT *
	FROM deleted)
	    SELECT @operation = 'U'
	ELSE
	    SELECT @operation = 'I'
	ELSE
		IF EXISTS(SELECT *
	FROM deleted)
    SELECT @operation = 'D'

	DECLARE @cashId UNIQUEIDENTIFIER;
	DECLARE @cashType NVARCHAR(255);
	DECLARE @startingQuotation DECIMAL(15,6);
	DECLARE @rate DECIMAL(15,6);
	DECLARE @currency NVARCHAR(255);

	IF @operation != 'D'
	
		SELECT @cashId = CASH_ID, @cashType = CASH_TYPE, @startingQuotation = STARTING_QUOTATION, @rate = RATE, @currency = CURRENCY
	FROM inserted
	ELSE 
		SELECT @cashId = CASH_ID, @cashType = CASH_TYPE, @startingQuotation = STARTING_QUOTATION, @rate = RATE, @currency = CURRENCY
	FROM deleted

	INSERT INTO PAS_IMPL.UL_CASH_HISTORY
		(CASH_HISTORY_ID, CASH_ID, CASH_TYPE, STARTING_QUOTATION, RATE, CURRENCY, OPERATION)
	VALUES
		(NEWID(), @cashId, @cashType, @startingQuotation, @rate, @currency, @operation)
END

SET QUOTED_IDENTIFIER ON
GO

-- CREATE VIEW
CREATE VIEW [PAS_IMPL].[UL_CASH_VIEW]
AS
	SELECT
		[CASH_ID] AS CASH_ID,
		[CASH_TYPE] AS CASH_TYPE,
		[STARTING_QUOTATION] AS STARTING_QUOTATION,
		[RATE] AS RATE,
		[CURRENCY] AS CURRENCY
	FROM [PAS_IMPL].[UL_CASH]
GO
-- CREATE TABLE UL_RISK_FUND_GROUP
CREATE TABLE [PAS_IMPL].[UL_RISK_FUND_GROUP]
(
	[RISK_FUND_GROUP_ID] [UNIQUEIDENTIFIER]
		CONSTRAINT [PK_UL_RISK_FUND_GROUP]
PRIMARY KEY CLUSTERED ([RISK_FUND_GROUP_ID] ASC)
)
GO

-- CREATE HISTORY TABLE
CREATE TABLE [PAS_IMPL].[UL_RISK_FUND_GROUP_HISTORY]
(
	[RISK_FUND_GROUP_HISTORY_ID] [UNIQUEIDENTIFIER],
	[RISK_FUND_GROUP_ID] [UNIQUEIDENTIFIER],
	[OPERATION] [NVARCHAR](1),
	CONSTRAINT [PK_UL_RISK_FUND_GROUP_HISTORY]
PRIMARY KEY CLUSTERED ([RISK_FUND_GROUP_HISTORY_ID] ASC)
)
GO

-- CREATE TRIGGER
CREATE TRIGGER [PAS_IMPL].[UL_RISK_FUND_GROUP_HISTORY_TRIGGER]
ON [PAS_IMPL].[UL_RISK_FUND_GROUP]
AFTER INSERT, UPDATE, DELETE
AS  
BEGIN
	DECLARE @operation NVARCHAR(1)
	IF EXISTS(SELECT *
	FROM inserted)
	  IF EXISTS(SELECT *
	FROM deleted)
	    SELECT @operation = 'U'
	ELSE
	    SELECT @operation = 'I'
	ELSE
		IF EXISTS(SELECT *
	FROM deleted)
    SELECT @operation = 'D'

	DECLARE @riskFundGroupId UNIQUEIDENTIFIER;

	IF @operation != 'D'
	
		SELECT @riskFundGroupId = RISK_FUND_GROUP_ID
	FROM inserted
	ELSE 
		SELECT @riskFundGroupId = RISK_FUND_GROUP_ID
	FROM deleted

	INSERT INTO PAS_IMPL.UL_RISK_FUND_GROUP_HISTORY
		(RISK_FUND_GROUP_HISTORY_ID, RISK_FUND_GROUP_ID, OPERATION)
	VALUES
		(NEWID(), @riskFundGroupId, @operation)
END

SET QUOTED_IDENTIFIER ON
GO

-- CREATE VIEW
CREATE VIEW [PAS_IMPL].[UL_RISK_FUND_GROUP_VIEW]
AS
	SELECT
		[RISK_FUND_GROUP_ID] AS RISK_FUND_ID
	FROM [PAS_IMPL].[UL_RISK_FUND_GROUP]
GO
-- CREATE TABLE UL_RISK_FUND
CREATE TABLE [PAS_IMPL].[UL_RISK_FUND]
(
	[RISK_FUND_ID] [UNIQUEIDENTIFIER],
	[RISK_FUND_GROUP_ID] [UNIQUEIDENTIFIER],
	[PIP_RF_ID] [UNIQUEIDENTIFIER],
	[PIP_SHARE] [DECIMAL](15,6),
	[PIP_TARIFF_QUOTATION] [DECIMAL](15,6),
	[KU_SIZE] [DECIMAL](15,6),
	[COUPON_SIZE] [DECIMAL](15,6),
	[CASH_ID] [UNIQUEIDENTIFIER],
	CONSTRAINT [PK_UL_RISK_FUND]
PRIMARY KEY CLUSTERED ([RISK_FUND_ID] ASC)
)
GO

ALTER TABLE [PAS_IMPL].[UL_RISK_FUND]  WITH CHECK ADD  CONSTRAINT [FK_PAS_IMPL_UL_RISK_FUND_PIP_RF_ID] FOREIGN KEY([PIP_RF_ID])
REFERENCES [PAS_IMPL].[UL_PIP_RF] ([PIP_RF_ID])
GO

ALTER TABLE [PAS_IMPL].[UL_RISK_FUND]  WITH CHECK ADD  CONSTRAINT [FK_PAS_IMPL_UL_RISK_FUND_CASH_ID] FOREIGN KEY([CASH_ID])
REFERENCES [PAS_IMPL].[UL_CASH] ([CASH_ID])
GO

ALTER TABLE [PAS_IMPL].[UL_RISK_FUND]  WITH CHECK ADD  CONSTRAINT [FK_PAS_IMPL_UL_RISK_FUND_GROUP_ID] FOREIGN KEY([RISK_FUND_GROUP_ID])
REFERENCES [PAS_IMPL].[UL_RISK_FUND_GROUP] ([RISK_FUND_GROUP_ID])
GO

-- CREATE HISTORY TABLE
CREATE TABLE [PAS_IMPL].[UL_RISK_FUND_HISTORY]
(
	[RISK_FUND_HISTORY_ID] [UNIQUEIDENTIFIER],
	[RISK_FUND_ID] [UNIQUEIDENTIFIER],
	[RISK_FUND_GROUP_ID] [UNIQUEIDENTIFIER],
	[PIP_RF_ID] [UNIQUEIDENTIFIER],
	[PIP_SHARE] [DECIMAL](15,6),
	[PIP_TARIFF_QUOTATION] [DECIMAL](15,6),
	[KU_SIZE] [DECIMAL](15,6),
	[COUPON_SIZE] [DECIMAL](15,6),
	[CASH_ID] [UNIQUEIDENTIFIER],
	[OPERATION] [NVARCHAR](1),
	CONSTRAINT [PK_UL_RISK_FUND_HISTORY]
PRIMARY KEY CLUSTERED ([RISK_FUND_HISTORY_ID] ASC)
)
GO

-- CREATE TRIGGER
CREATE TRIGGER [PAS_IMPL].[UL_RISK_FUND_HISTORY_TRIGGER]
ON [PAS_IMPL].[UL_RISK_FUND]
AFTER INSERT, UPDATE, DELETE
AS  
BEGIN
	DECLARE @operation NVARCHAR(1)
	IF EXISTS(SELECT *
	FROM inserted)
	  IF EXISTS(SELECT *
	FROM deleted)
	    SELECT @operation = 'U'
	ELSE
	    SELECT @operation = 'I'
	ELSE
		IF EXISTS(SELECT *
	FROM deleted)
    SELECT @operation = 'D'

	DECLARE @riskFundId UNIQUEIDENTIFIER;
	DECLARE @riskFundGroupId UNIQUEIDENTIFIER;
	DECLARE @pipRfId UNIQUEIDENTIFIER;
	DECLARE @pipShare DECIMAL(15,6);
	DECLARE @pipTariffQuotation DECIMAL(15,6);
	DECLARE @kuSize DECIMAL(15,6);
	DECLARE @couponSize DECIMAL(15,6);
	DECLARE @cashId UNIQUEIDENTIFIER;

	IF @operation != 'D'
	
		SELECT @riskFundId = RISK_FUND_ID, @riskFundGroupId = RISK_FUND_GROUP_ID, @pipRfId = PIP_RF_ID, @pipShare = PIP_SHARE, @pipTariffQuotation = PIP_TARIFF_QUOTATION, @kuSize = KU_SIZE, @couponSize = COUPON_SIZE, @cashId = CASH_ID
	FROM inserted
	ELSE 
		SELECT @riskFundId = RISK_FUND_ID, @riskFundGroupId = RISK_FUND_GROUP_ID, @pipRfId = PIP_RF_ID, @pipShare = PIP_SHARE, @pipTariffQuotation = PIP_TARIFF_QUOTATION, @kuSize = KU_SIZE, @couponSize = COUPON_SIZE, @cashId = CASH_ID
	FROM deleted

	INSERT INTO PAS_IMPL.UL_RISK_FUND_HISTORY
		(RISK_FUND_HISTORY_ID, RISK_FUND_ID, RISK_FUND_GROUP_ID, PIP_RF_ID, PIP_SHARE, PIP_TARIFF_QUOTATION, KU_SIZE, COUPON_SIZE, CASH_ID, OPERATION)
	VALUES
		(NEWID(), @riskFundId, @riskFundGroupId, @pipRfId, @pipShare, @pipTariffQuotation, @kuSize, @couponSize, @cashId, @operation)
END

SET QUOTED_IDENTIFIER ON
GO

-- CREATE VIEW
CREATE VIEW [PAS_IMPL].[UL_RISK_FUND_VIEW]
AS
	SELECT
		[RISK_FUND_ID] AS RISK_FUND_ID,
		[RISK_FUND_GROUP_ID] AS RISK_FUND_GROUP_ID,
		[PIP_RF_ID] AS PIP_RF_ID,
		[PIP_SHARE] AS PIP_SHARE,
		[PIP_TARIFF_QUOTATION] AS PIP_TARIFF_QUOTATION,
		[KU_SIZE] AS KU_SIZE,
		[COUPON_SIZE] AS COUPON_SIZE,
		[CASH_ID] AS CASH_ID
	FROM [PAS_IMPL].[UL_RISK_FUND]
GO
-- CREATE TABLE UL_INVESTMENT_OBSERVATION_DATES
CREATE TABLE [PAS_IMPL].[UL_INVESTMENT_OBSERVATION_DATES]
(
	[INVESTMENT_OBSERVATION_DATES_ID] [UNIQUEIDENTIFIER],
	[TRANSH_TYPE] [NVARCHAR](MAX),
	CONSTRAINT [PK_UL_INVESTMENT_OBSERVATION_DATES]
PRIMARY KEY CLUSTERED ([INVESTMENT_OBSERVATION_DATES_ID] ASC)
)
GO

-- CREATE HISTORY TABLE
CREATE TABLE [PAS_IMPL].[UL_INVESTMENT_OBSERVATION_DATES_HISTORY]
(
	[INVESTMENT_OBSERVATION_DATES_HISTORY_ID] [UNIQUEIDENTIFIER],
	[INVESTMENT_OBSERVATION_DATES_ID] [UNIQUEIDENTIFIER],
	[OPERATION] [NVARCHAR](1),
	[TRANSH_TYPE] [NVARCHAR](MAX),
	CONSTRAINT [PK_UL_INVESTMENT_OBSERVATION_DATES_HISTORY]
PRIMARY KEY CLUSTERED ([INVESTMENT_OBSERVATION_DATES_HISTORY_ID] ASC)
)
GO

-- CREATE TRIGGER
CREATE TRIGGER [PAS_IMPL].[UL_INVESTMENT_OBSERVATION_DATES_HISTORY_TRIGGER]
ON [PAS_IMPL].[UL_INVESTMENT_OBSERVATION_DATES]
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
	DECLARE @operation NVARCHAR(1)
	IF EXISTS(SELECT *
	FROM inserted)
	  IF EXISTS(SELECT *
	FROM deleted)
	    SELECT @operation = 'U'
	ELSE
	    SELECT @operation = 'I'
	ELSE
		IF EXISTS(SELECT *
	FROM deleted)
    SELECT @operation = 'D'

	DECLARE @id UNIQUEIDENTIFIER;
	DECLARE @transh_type NVARCHAR(MAX);

	IF @operation != 'D'

		SELECT @id = INVESTMENT_OBSERVATION_DATES_ID,
		       @transh_type = TRANSH_TYPE
		FROM inserted
	ELSE
		SELECT @id = INVESTMENT_OBSERVATION_DATES_ID,
		       @transh_type = TRANSH_TYPE
		FROM deleted

	INSERT INTO PAS_IMPL.UL_INVESTMENT_OBSERVATION_DATES_HISTORY
		(INVESTMENT_OBSERVATION_DATES_HISTORY_ID, INVESTMENT_OBSERVATION_DATES_ID, TRANSH_TYPE, OPERATION)
	VALUES
		(NEWID(), @id, @transh_type, @operation)
END

SET QUOTED_IDENTIFIER ON
GO

-- CREATE VIEW
CREATE VIEW [PAS_IMPL].[UL_INVESTMENT_OBSERVATION_DATES_VIEW]
AS
	SELECT
		[INVESTMENT_OBSERVATION_DATES_ID] AS INVESTMENT_OBSERVATION_DATES_ID,
		[TRANSH_TYPE] as TRANSH_TYPE
	FROM [PAS_IMPL].[UL_INVESTMENT_OBSERVATION_DATES]
GO
-- CREATE TABLE UL_PRODUCTS
CREATE TABLE [PAS_IMPL].[UL_PRODUCTS]
(
	[UL_PRODUCT_ID] [UNIQUEIDENTIFIER],
	[PRODUCT_ID] [UNIQUEIDENTIFIER],
	[PRODUCT_VERSION_ID] [UNIQUEIDENTIFIER],
	[INVESTMENT_OBSERVATION_DATES_ID] [UNIQUEIDENTIFIER],
	CONSTRAINT [PK_UL_PRODUCTS]
PRIMARY KEY CLUSTERED ([UL_PRODUCT_ID] ASC)
)
GO

ALTER TABLE [PAS_IMPL].[UL_PRODUCTS]  WITH CHECK ADD  CONSTRAINT [FK_PAS_IMPL_UL_PRODUCTS_INVESTMENT_OBSERVATION_DATES_ID] FOREIGN KEY([INVESTMENT_OBSERVATION_DATES_ID])
REFERENCES [PAS_IMPL].[UL_INVESTMENT_OBSERVATION_DATES] ([INVESTMENT_OBSERVATION_DATES_ID])
GO

ALTER TABLE [PAS_IMPL].[UL_PRODUCTS]  WITH CHECK ADD  CONSTRAINT [FK_PAS_IMPL_UL_PRODUCTS_PRODUCT_CODE] FOREIGN KEY([PRODUCT_ID])
REFERENCES [BFX_IMPL].[PRODUCTS] ([ID])
GO

-- CREATE HISTORY TABLE
CREATE TABLE [PAS_IMPL].[UL_PRODUCTS_HISTORY]
(
	[PRODUCT_HISTORY_ID] [UNIQUEIDENTIFIER],
	[UL_PRODUCT_ID] [UNIQUEIDENTIFIER],
	[PRODUCT_ID] [UNIQUEIDENTIFIER],
	[PRODUCT_VERSION_ID] [UNIQUEIDENTIFIER],
	[INVESTMENT_OBSERVATION_DATES_ID] [UNIQUEIDENTIFIER],
	[OPERATION] [NVARCHAR](1),
	CONSTRAINT [PK_UL_PRODUCTS_HISTORY]
PRIMARY KEY CLUSTERED ([PRODUCT_HISTORY_ID] ASC)
)
GO

-- CREATE TRIGGER
CREATE TRIGGER [PAS_IMPL].[UL_PRODUCTS_HISTORY_TRIGGER]
ON [PAS_IMPL].[UL_PRODUCTS]
AFTER INSERT, UPDATE, DELETE
AS  
BEGIN
	DECLARE @operation NVARCHAR(1)
	IF EXISTS(SELECT *
	FROM inserted)
	  IF EXISTS(SELECT *
	FROM deleted)
	    SELECT @operation = 'U'
	ELSE
	    SELECT @operation = 'I'
	ELSE
		IF EXISTS(SELECT *
	FROM deleted)
    SELECT @operation = 'D'

	DECLARE @ulProductId UNIQUEIDENTIFIER;
	DECLARE @productId UNIQUEIDENTIFIER;
	DECLARE @productVersionId UNIQUEIDENTIFIER;
	DECLARE @investmentObservationDatesId UNIQUEIDENTIFIER;

	IF @operation != 'D'
	
		SELECT @ulProductId = UL_PRODUCT_ID, @productId = PRODUCT_ID, @productVersionId = PRODUCT_VERSION_ID, @investmentObservationDatesId = INVESTMENT_OBSERVATION_DATES_ID
	FROM inserted
	ELSE 
		SELECT @ulProductId = UL_PRODUCT_ID, @productId = PRODUCT_ID, @productVersionId = PRODUCT_VERSION_ID, @investmentObservationDatesId = INVESTMENT_OBSERVATION_DATES_ID
	FROM deleted

	INSERT INTO PAS_IMPL.UL_PRODUCTS_HISTORY
		(PRODUCT_HISTORY_ID, UL_PRODUCT_ID, PRODUCT_ID, PRODUCT_VERSION_ID, INVESTMENT_OBSERVATION_DATES_ID, OPERATION)
	VALUES
		(NEWID(), @ulProductId, @productId, @productVersionId, @investmentObservationDatesId, @operation)
END

SET QUOTED_IDENTIFIER ON
GO

-- CREATE VIEW
CREATE VIEW [PAS_IMPL].[UL_PRODUCTS_VIEW]
AS
	SELECT
		[UL_PRODUCT_ID] AS UL_PRODUCT_ID,
		[PRODUCT_ID] AS PRODUCT_ID,
		[PRODUCT_VERSION_ID] AS PRODUCT_VERSION_ID,
		[INVESTMENT_OBSERVATION_DATES_ID] AS INVESTMENT_OBSERVATION_DATES_ID
	FROM [PAS_IMPL].[UL_PRODUCTS]
GO
-- CREATE TABLE UL_RATES
CREATE TABLE [PAS_IMPL].[UL_RATES]
(
	[RATE_ID] [UNIQUEIDENTIFIER],
	[RATE_TYPE] [NVARCHAR](255),
	[BEGIN_DATE] [DATE],
	[END_DATE] [DATE],
	[CURRENCY] [NVARCHAR](255),
	[TERM] [INT],
	[RATE_VALUE] [DECIMAL](15,6)
		CONSTRAINT [PK_UL_RATES]
PRIMARY KEY CLUSTERED ([RATE_ID] ASC)
)
GO

-- CREATE HISTORY TABLE
CREATE TABLE [PAS_IMPL].[UL_RATES_HISTORY]
(
	[RATE_HISTORY_ID] [UNIQUEIDENTIFIER],
	[RATE_ID] [UNIQUEIDENTIFIER],
	[RATE_TYPE] [NVARCHAR](255),
	[BEGIN_DATE] [DATE],
	[END_DATE] [DATE],
	[CURRENCY] [NVARCHAR](255),
	[TERM] [INT],
	[RATE_VALUE] [DECIMAL](15,6),
	[OPERATION] [NVARCHAR](1),
	CONSTRAINT [PK_UL_RATES_HISTORY]
PRIMARY KEY CLUSTERED ([RATE_HISTORY_ID] ASC)
)
GO

-- CREATE TRIGGER
CREATE TRIGGER [PAS_IMPL].[UL_RATES_HISTORY_TRIGGER]
ON [PAS_IMPL].[UL_RATES]
AFTER INSERT, UPDATE, DELETE
AS  
BEGIN
	DECLARE @operation NVARCHAR(1)
	IF EXISTS(SELECT *
	FROM inserted)
	  IF EXISTS(SELECT *
	FROM deleted)
	    SELECT @operation = 'U'
	ELSE
	    SELECT @operation = 'I'
	ELSE
		IF EXISTS(SELECT *
	FROM deleted)
    SELECT @operation = 'D'

	DECLARE @rateId UNIQUEIDENTIFIER;
	DECLARE @rateType NVARCHAR(255);
	DECLARE @beginDate DATE;
	DECLARE @endDate DATE;
	DECLARE @currency NVARCHAR(255);
	DECLARE @term INT;
	DECLARE @rate DECIMAL(15,6);

	IF @operation != 'D'
		SELECT @rateId = RATE_ID, @rateType = RATE_TYPE, @beginDate = BEGIN_DATE, @endDate = END_DATE, @currency = CURRENCY, @term = TERM, @rate = RATE_VALUE
	FROM inserted
	ELSE 
		SELECT @rateId = RATE_ID, @rateType = RATE_TYPE, @beginDate = BEGIN_DATE, @endDate = END_DATE, @currency = CURRENCY, @term = TERM, @rate = RATE_VALUE
	FROM deleted

	INSERT INTO PAS_IMPL.UL_RATES_HISTORY
		(RATE_HISTORY_ID, RATE_ID, RATE_TYPE, BEGIN_DATE, END_DATE, CURRENCY, TERM, RATE_VALUE, OPERATION)
	VALUES
		(NEWID(), @rateId, @rateType, @beginDate, @endDate, @currency, @term, @rate, @operation)
END

SET QUOTED_IDENTIFIER ON
GO

-- CREATE VIEW
CREATE VIEW [PAS_IMPL].[UL_RATES_VIEW]
AS
	SELECT
		[RATE_ID] AS ID,
		[RATE_TYPE] AS RATE_TYPE,
		[BEGIN_DATE] AS BEGIN_DATE,
		[END_DATE] AS END_DATE,
		[CURRENCY] AS CURRENCY,
		[TERM] AS TERM,
		[RATE_VALUE] AS RATE_VALUE
	FROM [PAS_IMPL].[UL_RATES]
GO
-- CREATE TABLE UL_RATE_MIX
CREATE TABLE [PAS_IMPL].[UL_RATE_MIX]
(
	[RATE_MIX_ID] [UNIQUEIDENTIFIER],
	[RATE_ID] [UNIQUEIDENTIFIER],
	[RATE_SHARE] [DECIMAL](15,6)
	CONSTRAINT [PK_UL_RATE_MIX]
PRIMARY KEY CLUSTERED ([RATE_MIX_ID] ASC)
)
GO

ALTER TABLE [PAS_IMPL].[UL_RATE_MIX]  WITH CHECK ADD  CONSTRAINT [FK_PAS_IMPL_UL_RATE_MIX_RATE_ID] FOREIGN KEY([RATE_ID])
REFERENCES [PAS_IMPL].[UL_RATES] ([RATE_ID])
GO

-- CREATE HISTORY TABLE
CREATE TABLE [PAS_IMPL].[UL_RATE_MIX_HISTORY]
(
	[RATE_MIX_HISTORY_ID] [UNIQUEIDENTIFIER],
	[RATE_MIX_ID] [UNIQUEIDENTIFIER],
	[RATE_ID] [UNIQUEIDENTIFIER],
	[RATE_SHARE] [DECIMAL](15,6),
	[OPERATION] [NVARCHAR](1),
	CONSTRAINT [PK_UL_RATE_MIX_HISTORY]
PRIMARY KEY CLUSTERED ([RATE_MIX_HISTORY_ID] ASC)
)
GO

-- CREATE TRIGGER
CREATE TRIGGER [PAS_IMPL].[UL_RATE_MIX_HISTORY_TRIGGER]
ON [PAS_IMPL].[UL_RATE_MIX]
AFTER INSERT, UPDATE, DELETE
AS  
BEGIN
	DECLARE @operation NVARCHAR(1)
	IF EXISTS(SELECT *
	FROM inserted)
	  IF EXISTS(SELECT *
	FROM deleted)
	    SELECT @operation = 'U'
	ELSE
	    SELECT @operation = 'I'
	ELSE
		IF EXISTS(SELECT *
	FROM deleted)
    SELECT @operation = 'D'

	DECLARE @rateMixID UNIQUEIDENTIFIER;
	DECLARE @rateID UNIQUEIDENTIFIER;
	DECLARE @rateShare DECIMAL(15,6);
	
	IF @operation != 'D'
	
		SELECT @rateMixID = RATE_MIX_ID, @rateID=RATE_ID, @rateShare = RATE_SHARE
		FROM inserted
	ELSE 
		SELECT @rateMixID = RATE_MIX_ID, @rateID=RATE_ID, @rateShare = RATE_SHARE
		FROM deleted
	
	INSERT INTO PAS_IMPL.UL_RATE_MIX_HISTORY
		(RATE_MIX_HISTORY_ID, RATE_MIX_ID, RATE_ID, RATE_SHARE, OPERATION)
	VALUES
		(NEWID(), @rateMixID, @rateID, @rateShare, @operation)
END

SET QUOTED_IDENTIFIER ON
GO

-- CREATE VIEW
CREATE VIEW [PAS_IMPL].[UL_RATE_MIX_VIEW]
AS
	SELECT
		[RATE_MIX_ID] AS RATE_MIX_ID,
		[RATE_ID] AS RATE_ID,
		[RATE_SHARE] AS RATE_SHARE
	FROM [PAS_IMPL].[UL_RATE_MIX]
GO
-- CREATE TABLE UL_PIP_GF
CREATE TABLE [PAS_IMPL].[UL_PIP_GF]
(
	[PIP_GF_ID] [UNIQUEIDENTIFIER],
	[RATE_MIX_ID] [UNIQUEIDENTIFIER],
	[MFEE] [DECIMAL](15,6),
	[TARIFF_RATE] [DECIMAL](15,6),
	[CURRENCY] [NVARCHAR](255),
	CONSTRAINT [PK_UL_PIP_GF]
PRIMARY KEY CLUSTERED ([PIP_GF_ID] ASC)
)
GO

ALTER TABLE [PAS_IMPL].[UL_PIP_GF]  WITH CHECK ADD  CONSTRAINT [FK_PAS_IMPL_UL_PIP_GF_RATE_MIX_ID] FOREIGN KEY([RATE_MIX_ID])
REFERENCES [PAS_IMPL].[UL_RATE_MIX] ([RATE_MIX_ID])
GO

-- CREATE HISTORY TABLE
CREATE TABLE [PAS_IMPL].[UL_PIP_GF_HISTORY]
(
	[PIP_GF_HISTORY_ID] [UNIQUEIDENTIFIER],
	[PIP_GF_ID] [UNIQUEIDENTIFIER],
	[RATE_MIX_ID] [UNIQUEIDENTIFIER],
	[MFEE] [DECIMAL](15,6),
	[TARIFF_RATE] [DECIMAL](15,6),
	[CURRENCY] [NVARCHAR](255),
	[OPERATION] [NVARCHAR](1),
	CONSTRAINT [PK_UL_PIP_GF_HISTORY]
PRIMARY KEY CLUSTERED ([PIP_GF_HISTORY_ID] ASC)
)
GO

-- CREATE TRIGGER
CREATE TRIGGER [PAS_IMPL].[UL_PIP_GF_HISTORY_TRIGGER]
ON [PAS_IMPL].[UL_PIP_GF]
AFTER INSERT, UPDATE, DELETE
AS  
BEGIN
	DECLARE @operation NVARCHAR(1)
	IF EXISTS(SELECT *
	FROM inserted)
	  IF EXISTS(SELECT *
	FROM deleted)
	    SELECT @operation = 'U'
	ELSE
	    SELECT @operation = 'I'
	ELSE
		IF EXISTS(SELECT *
	FROM deleted)
    SELECT @operation = 'D'

	DECLARE @pipGFId UNIQUEIDENTIFIER;
	DECLARE @rateMixID UNIQUEIDENTIFIER;
	DECLARE @mfee DECIMAL(15,6);
	DECLARE @tariffRate DECIMAL(15,6);
	DECLARE @currency NVARCHAR(255);

	IF @operation != 'D'
	
		SELECT @pipGFId = PIP_GF_ID, @rateMixID=RATE_MIX_ID, @mfee = MFEE, @tariffRate = TARIFF_RATE, @currency = CURRENCY
	FROM inserted
	ELSE 
		SELECT @pipGFId = PIP_GF_ID, @rateMixID=RATE_MIX_ID, @mfee = MFEE, @tariffRate = TARIFF_RATE, @currency = CURRENCY
	FROM deleted

	INSERT INTO PAS_IMPL.UL_PIP_GF_HISTORY
		(PIP_GF_HISTORY_ID, PIP_GF_ID, RATE_MIX_ID, MFEE, TARIFF_RATE, CURRENCY, OPERATION)
	VALUES
		(NEWID(), @pipGFId, @rateMixID, @mfee, @tariffRate, @currency, @operation)
END

SET QUOTED_IDENTIFIER ON
GO

-- CREATE VIEW
CREATE VIEW [PAS_IMPL].[UL_PIP_GF_VIEW]
AS
	SELECT
		[PIP_GF_ID] AS PIP_GF_ID,
		[RATE_MIX_ID] AS RATE_MIX_ID,
		[MFEE] AS MFEE,
		[TARIFF_RATE] AS TARIFF_RATE,
		[CURRENCY] AS CURRENCY
	FROM [PAS_IMPL].[UL_PIP_GF]
GO
-- CREATE TABLE UL_GUARANTEE_FUND
CREATE TABLE [PAS_IMPL].[UL_GUARANTEE_FUND]
(
	[GUARANTEE_FUND_ID] [UNIQUEIDENTIFIER],
	[PIP_GF_ID] [UNIQUEIDENTIFIER],
	[PIP_SHARE] [DECIMAL](15,6),
	[PIP_TARIFF_QUOTATION] [DECIMAL](15,6)
		CONSTRAINT [PK_UL_GUARANTEE_FUND]
PRIMARY KEY CLUSTERED ([GUARANTEE_FUND_ID] ASC)
)
GO

ALTER TABLE [PAS_IMPL].[UL_GUARANTEE_FUND]  WITH CHECK ADD  CONSTRAINT [FK_PAS_IMPL_UL_GUARANTEE_FUND_PIP_GF_ID] FOREIGN KEY([PIP_GF_ID])
REFERENCES [PAS_IMPL].[UL_PIP_GF] ([PIP_GF_ID])
GO

-- CREATE HISTORY TABLE
CREATE TABLE [PAS_IMPL].[UL_GUARANTEE_FUND_HISTORY]
(
	[GUARANTEE_FUND_HISTORY_ID] [UNIQUEIDENTIFIER],
	[GUARANTEE_FUND_ID] [UNIQUEIDENTIFIER],
	[PIP_GF_ID] [UNIQUEIDENTIFIER],
	[PIP_SHARE] [DECIMAL](15,6),
	[PIP_TARIFF_QUOTATION] [DECIMAL](15,6),
	[OPERATION] [NVARCHAR](1),
	CONSTRAINT [PK_UL_GUARANTEE_FUND_HISTORY]
PRIMARY KEY CLUSTERED ([GUARANTEE_FUND_HISTORY_ID] ASC)
)
GO

-- CREATE TRIGGER
CREATE TRIGGER [PAS_IMPL].[UL_GUARANTEE_FUND_HISTORY_TRIGGER]
ON [PAS_IMPL].[UL_GUARANTEE_FUND]
AFTER INSERT, UPDATE, DELETE
AS  
BEGIN
	DECLARE @operation NVARCHAR(1)
	IF EXISTS(SELECT *
	FROM inserted)
	  IF EXISTS(SELECT *
	FROM deleted)
	    SELECT @operation = 'U'
	ELSE
	    SELECT @operation = 'I'
	ELSE
		IF EXISTS(SELECT *
	FROM deleted)
    SELECT @operation = 'D'

	DECLARE @guaranteeFUNDId UNIQUEIDENTIFIER;
	DECLARE @pipGFId NVARCHAR(255);
	DECLARE @pipShare DECIMAL(15,6);
	DECLARE @pipTariffQuotation DECIMAL(15,6);

	IF @operation != 'D'
	
		SELECT @guaranteeFUNDId = GUARANTEE_FUND_ID, @pipGFId = PIP_GF_ID, @pipShare = PIP_SHARE, @pipTariffQuotation = PIP_TARIFF_QUOTATION
	FROM inserted
	ELSE 
		SELECT @guaranteeFUNDId = GUARANTEE_FUND_ID, @pipGFId = PIP_GF_ID, @pipShare = PIP_SHARE, @pipTariffQuotation = PIP_TARIFF_QUOTATION
	FROM deleted

	INSERT INTO PAS_IMPL.UL_GUARANTEE_FUND_HISTORY
		(GUARANTEE_FUND_HISTORY_ID, GUARANTEE_FUND_ID, PIP_GF_ID, PIP_SHARE, PIP_TARIFF_QUOTATION, OPERATION)
	VALUES
		(NEWID(), @guaranteeFUNDId, @pipGFId, @pipShare, @pipTariffQuotation, @operation)
END

SET QUOTED_IDENTIFIER ON
GO

-- CREATE VIEW
CREATE VIEW [PAS_IMPL].[UL_GUARANTEE_FUND_VIEW]
AS
	SELECT
		[GUARANTEE_FUND_ID] AS GUARANTEE_FUND_ID,
		[PIP_GF_ID] AS PIP_GF_ID,
		[PIP_SHARE] AS PIP_SHARE,
		[PIP_TARIFF_QUOTATION] AS PIP_TARIFF_QUOTATION
	FROM [PAS_IMPL].[UL_GUARANTEE_FUND]
GO
-- CREATE TABLE UL_GUARANTEE_DATES
CREATE TABLE [PAS_IMPL].[UL_GUARANTEE_DATES]
(
	[GUARANTEE_DATES_ID] [UNIQUEIDENTIFIER],
	[OBSERVATION_NUMBER] [INT],
	[BARRIER_NAME] [NVARCHAR](255),
	CONSTRAINT [PK_UL_GUARANTEE_DATES]
PRIMARY KEY CLUSTERED ([GUARANTEE_DATES_ID] ASC)
)
GO

-- CREATE HISTORY TABLE
CREATE TABLE [PAS_IMPL].[UL_GUARANTEE_DATES_HISTORY]
(
	[GUARANTEE_DATES_HISTORY_ID] [UNIQUEIDENTIFIER],
	[GUARANTEE_DATES_ID] [UNIQUEIDENTIFIER],
	[OBSERVATION_NUMBER] [INT],
	[BARRIER_NAME] [NVARCHAR](255),
	[OPERATION] [NVARCHAR](1),
	CONSTRAINT [PK_UL_GUARANTEE_DATES_HISTORY]
PRIMARY KEY CLUSTERED ([GUARANTEE_DATES_HISTORY_ID] ASC)
)
GO

-- CREATE TRIGGER
CREATE TRIGGER [PAS_IMPL].[UL_GUARANTEE_DATES_HISTORY_TRIGGER]
ON [PAS_IMPL].[UL_GUARANTEE_DATES]
AFTER INSERT, UPDATE, DELETE
AS  
BEGIN
	DECLARE @operation NVARCHAR(1)
	IF EXISTS(SELECT *
	FROM inserted)
	  IF EXISTS(SELECT *
	FROM deleted)
	    SELECT @operation = 'U'
	ELSE
	    SELECT @operation = 'I'
	ELSE
		IF EXISTS(SELECT *
	FROM deleted)
    SELECT @operation = 'D'

	DECLARE @guaranteeDatesId UNIQUEIDENTIFIER;
	DECLARE @observationNumber INT;
	DECLARE @barrierName NVARCHAR(255);

	IF @operation != 'D'
	
		SELECT @guaranteeDatesId = GUARANTEE_DATES_ID, @observationNumber = OBSERVATION_NUMBER, @barrierName = BARRIER_NAME
	FROM inserted
	ELSE 
		SELECT @guaranteeDatesId = GUARANTEE_DATES_ID, @observationNumber = OBSERVATION_NUMBER, @barrierName = BARRIER_NAME
	FROM deleted

	INSERT INTO PAS_IMPL.UL_GUARANTEE_DATES_HISTORY
		(GUARANTEE_DATES_HISTORY_ID, GUARANTEE_DATES_ID, OBSERVATION_NUMBER, BARRIER_NAME, OPERATION)
	VALUES
		(NEWID(), @guaranteeDatesId, @observationNumber, @barrierName, @operation)
END

SET QUOTED_IDENTIFIER ON
GO

-- CREATE VIEW
CREATE VIEW [PAS_IMPL].[UL_GUARANTEE_DATES_VIEW]
AS
	SELECT
		[GUARANTEE_DATES_ID] AS GUARANTEE_DATES_ID,
		[OBSERVATION_NUMBER] AS OBSERVATION_NUMBER,
		[BARRIER_NAME] AS BARRIER_NAME
	FROM [PAS_IMPL].[UL_GUARANTEE_DATES]
GO
-- CREATE TABLE UL_GUARANTEES
CREATE TABLE [PAS_IMPL].[UL_GUARANTEES]
(
	[GUARANTEE_ID] [UNIQUEIDENTIFIER],
	[TARIFF_RATE_CURRENCY] [NVARCHAR](255),
	[CAPITAL_PROTECTION] [DECIMAL](15,6),
	[GUARANTEED_COUPON] [DECIMAL](15,6),
	[GUARANTEED_COUPON_FREQUENCY] [INT],
	[GUARANTEE_DATES_ID] [UNIQUEIDENTIFIER]
	CONSTRAINT [PK_UL_GUARANTEES]
PRIMARY KEY CLUSTERED ([GUARANTEE_ID] ASC)
)
GO

ALTER TABLE [PAS_IMPL].[UL_GUARANTEES] WITH CHECK ADD CONSTRAINT [FK_PAS_IMPL_UL_GUARANTEES_GUARANTEE_DATES_ID] FOREIGN KEY([GUARANTEE_DATES_ID])
REFERENCES [PAS_IMPL].[UL_GUARANTEE_DATES] ([GUARANTEE_DATES_ID])
GO

-- CREATE HISTORY TABLE
CREATE TABLE [PAS_IMPL].[UL_GUARANTEES_HISTORY]
(
	[GUARANTEE_HISTORY_ID] [UNIQUEIDENTIFIER],
	[GUARANTEE_ID] [UNIQUEIDENTIFIER],
	[TARIFF_RATE_CURRENCY] [NVARCHAR](255),
	[CAPITAL_PROTECTION] [DECIMAL](15,6),
	[GUARANTEED_COUPON] [DECIMAL](15,6),
	[GUARANTEED_COUPON_FREQUENCY] [INT],
	[GUARANTEE_DATES_ID] [UNIQUEIDENTIFIER],
	[OPERATION] [NVARCHAR](1),
	CONSTRAINT [PK_UL_GUARANTEES_HISTORY]
PRIMARY KEY CLUSTERED ([GUARANTEE_HISTORY_ID] ASC)
)
GO

-- CREATE TRIGGER
CREATE TRIGGER [PAS_IMPL].[UL_GUARANTEES_HISTORY_TRIGGER]
ON [PAS_IMPL].[UL_GUARANTEES]
AFTER INSERT, UPDATE, DELETE
AS  
BEGIN
	DECLARE @operation NVARCHAR(1)
	IF EXISTS(SELECT *
	FROM inserted)
	  IF EXISTS(SELECT *
	FROM deleted)
	    SELECT @operation = 'U'
	ELSE
	    SELECT @operation = 'I'
	ELSE
		IF EXISTS(SELECT *
	FROM deleted)
    SELECT @operation = 'D'

	DECLARE @guaranteeId UNIQUEIDENTIFIER;
	DECLARE @tariffRateCurrency NVARCHAR(255);
	DECLARE @capitalProtection DECIMAL(15,6);
	DECLARE @guranteedCoupon DECIMAL(15,6);
	DECLARE @guranteedCouponFrequency NVARCHAR(255);
	DECLARE @guaranteeDatesID NVARCHAR(255);
	
	IF @operation != 'D'
	
		SELECT @guaranteeId = GUARANTEE_ID, @tariffRateCurrency = TARIFF_RATE_CURRENCY, @capitalProtection = CAPITAL_PROTECTION, @guranteedCoupon = GUARANTEED_COUPON, @guranteedCouponFrequency = GUARANTEED_COUPON_FREQUENCY, @guaranteeDatesID = GUARANTEE_DATES_ID
		FROM inserted
	ELSE 
		SELECT @guaranteeId = GUARANTEE_ID, @tariffRateCurrency = TARIFF_RATE_CURRENCY, @capitalProtection = CAPITAL_PROTECTION, @guranteedCoupon = GUARANTEED_COUPON, @guranteedCouponFrequency = GUARANTEED_COUPON_FREQUENCY, @guaranteeDatesID = GUARANTEE_DATES_ID
		FROM deleted
	
	INSERT INTO PAS_IMPL.UL_GUARANTEES_HISTORY
		(GUARANTEE_HISTORY_ID, GUARANTEE_ID, TARIFF_RATE_CURRENCY, CAPITAL_PROTECTION, GUARANTEED_COUPON, GUARANTEED_COUPON_FREQUENCY, GUARANTEE_DATES_ID, OPERATION)
	VALUES
		(NEWID(), @guaranteeId, @tariffRateCurrency, @capitalProtection, @guranteedCoupon, @guranteedCouponFrequency, @guaranteeDatesID, @operation)
END

SET QUOTED_IDENTIFIER ON
GO

-- CREATE VIEW
CREATE VIEW [PAS_IMPL].[UL_GUARANTEES_VIEW]
AS
	SELECT
		[GUARANTEE_ID] AS ID,
		[TARIFF_RATE_CURRENCY] AS TARIFF_RATE_CURRENCY,
		[CAPITAL_PROTECTION] AS CAPITAL_PROTECTION,
		[GUARANTEED_COUPON] AS GUARANTEED_COUPON,
		[GUARANTEED_COUPON_FREQUENCY] AS GUARANTEED_COUPON_FREQUENCY,
		[GUARANTEE_DATES_ID] AS GUARANTEE_DATES_ID
	FROM [PAS_IMPL].[UL_GUARANTEES]
GO
-- CREATE TABLE UL_HISTORICAL_PROFITABILITY
CREATE TABLE [PAS_IMPL].[UL_HISTORICAL_PROFITABILITY]
(
	[HISTORICAL_PROFITABILITY_ID] [UNIQUEIDENTIFIER],
	[PERIOD_BEGIN_DATE] [DATE],
	[PERIOD_END_DATE] [DATE],
	[PRODUCT_TYPE] [NVARCHAR](255),
	[TERM] [INT],
	[CURRENCY] [NVARCHAR](255),
	[INSTALLMENT_TYPE] [NVARCHAR](255),
	[PAYMENT_TYPE] [NVARCHAR](255),
	[PROFITABILITY] [DECIMAL](15,6),
	[PROFITABILITY_TEXT] [NVARCHAR](MAX),
	[UPDATED_DATE] [DATE],
	[ASSET_TYPE] [NVARCHAR](255),
	CONSTRAINT [PK_HISTORICAL_PROFITABILIT]
PRIMARY KEY CLUSTERED ([HISTORICAL_PROFITABILITY_ID] ASC)
)
GO

-- CREATE HISTORY TABLE
CREATE TABLE [PAS_IMPL].[UL_HISTORICAL_PROFITABILITY_HISTORY]
(
	[HISTORICAL_PROFITABILITY_HISTORY_ID] [UNIQUEIDENTIFIER],
	[HISTORICAL_PROFITABILITY_ID] [UNIQUEIDENTIFIER],
	[PERIOD_BEGIN_DATE] [DATE],
	[PERIOD_END_DATE] [DATE],
	[PRODUCT_TYPE] [NVARCHAR](255),
	[TERM] [INT],
	[CURRENCY] [NVARCHAR](255),
	[INSTALLMENT_TYPE] [NVARCHAR](255),
	[PAYMENT_TYPE] [NVARCHAR](255),
	[PROFITABILITY] [DECIMAL](15,6),
	[PROFITABILITY_TEXT] [NVARCHAR](MAX),
	[UPDATED_DATE] [DATE],
	[ASSET_TYPE] [NVARCHAR](255),
	[OPERATION] [NVARCHAR](1),
	CONSTRAINT [PK_HISTORICAL_PROFITABILIT_HISTORY]
PRIMARY KEY CLUSTERED ([HISTORICAL_PROFITABILITY_HISTORY_ID] ASC)
)
GO

-- CREATE TRIGGER
CREATE TRIGGER [PAS_IMPL].[UL_HISTORICAL_PROFITABILITY_HISTORY_TRIGGER]
ON [PAS_IMPL].[UL_HISTORICAL_PROFITABILITY]
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
	DECLARE @operation NVARCHAR(1)
	IF EXISTS(SELECT *
	FROM inserted)
	  IF EXISTS(SELECT *
	FROM deleted)
	    SELECT @operation = 'U'
	ELSE
	    SELECT @operation = 'I'
	ELSE
		IF EXISTS(SELECT *
	FROM deleted)
    SELECT @operation = 'D'

	DECLARE @historicalProfitabilityId UNIQUEIDENTIFIER;
	DECLARE @code NVARCHAR(255);
	DECLARE @periodBeginDate DATE;
	DECLARE @periodEndDate DATE;
	DECLARE @productType NVARCHAR(255);
	DECLARE @term NVARCHAR(255);
	DECLARE @currency NVARCHAR(255);
	DECLARE @installmentType NVARCHAR(255);
	DECLARE @paymentType NVARCHAR(255);
	DECLARE @profitability NVARCHAR(255);
	DECLARE @profitabilityText NVARCHAR(MAX);
	DECLARE @updatedDate DATE;
	DECLARE @assetType NVARCHAR(255);

	IF @operation != 'D'

	SELECT @historicalProfitabilityId = HISTORICAL_PROFITABILITY_ID, @periodBeginDate = PERIOD_BEGIN_DATE, @periodEndDate = PERIOD_END_DATE, @productType = PRODUCT_TYPE, @term = TERM,
		 @currency = CURRENCY, @installmentType = INSTALLMENT_TYPE, @paymentType = PAYMENT_TYPE, @profitability = PROFITABILITY, @profitabilityText = PROFITABILITY_TEXT, @updatedDate = UPDATED_DATE, @assetType = ASSET_TYPE
	FROM inserted
	ELSE
	SELECT @historicalProfitabilityId = HISTORICAL_PROFITABILITY_ID, @periodBeginDate = PERIOD_BEGIN_DATE, @periodEndDate = PERIOD_END_DATE, @productType = PRODUCT_TYPE, @term = TERM,
		 @currency = CURRENCY, @installmentType = INSTALLMENT_TYPE, @paymentType = PAYMENT_TYPE, @profitability = PROFITABILITY, @profitabilityText = PROFITABILITY_TEXT, @updatedDate = UPDATED_DATE, @assetType = ASSET_TYPE
	FROM deleted

	INSERT INTO PAS_IMPL.UL_HISTORICAL_PROFITABILITY_HISTORY
		(HISTORICAL_PROFITABILITY_HISTORY_ID, HISTORICAL_PROFITABILITY_ID, PERIOD_BEGIN_DATE, PERIOD_END_DATE, PRODUCT_TYPE, TERM, CURRENCY, INSTALLMENT_TYPE, PAYMENT_TYPE, PROFITABILITY, PROFITABILITY_TEXT, UPDATED_DATE, ASSET_TYPE, OPERATION)
	VALUES
		(NEWID(), @historicalProfitabilityId, @periodBeginDate, @periodEndDate, @productType, @term, @currency, @installmentType, @paymentType, @profitability, @profitabilityText, @updatedDate, @assetType, @operation)
END

SET QUOTED_IDENTIFIER ON
GO

-- CREATE VIEW
CREATE VIEW [PAS_IMPL].[UL_HISTORICAL_PROFITABILITY_VIEW]
AS
	SELECT
		[HISTORICAL_PROFITABILITY_ID] AS HISTORICAL_PROFITABILITY_ID,
		[PERIOD_BEGIN_DATE] AS PERIOD_BEGIN_DATE,
		[PERIOD_END_DATE] AS PERIOD_END_DATE,
		[PRODUCT_TYPE] AS PRODUCT_TYPE,
		[TERM] AS TERM,
		[CURRENCY] AS CURRENCY,
		[INSTALLMENT_TYPE] AS INSTALLMENT_TYPE,
		[PAYMENT_TYPE] AS PAYMENT_TYPE,
		[PROFITABILITY] AS PROFITABILITY,
		[PROFITABILITY_TEXT] AS PROFITABILITY_TEXT,
		[UPDATED_DATE] AS UPDATED_DATE,
		[ASSET_TYPE] AS ASSET_TYPE
	FROM [PAS_IMPL].[UL_HISTORICAL_PROFITABILITY]
GO
-- CREATE TABLE UL_PRODUCT_VERSION
CREATE TABLE [PAS_IMPL].[UL_PRODUCT_VERSION]
(
	[PRODUCT_VERSION_ID] [UNIQUEIDENTIFIER],
	[PRODUCT_MARKET_TYPE] [NVARCHAR](255),
	[STATUS] [NVARCHAR](255),
	[CREATION_DATE] [DATE],
	[APPROVAL_DATE] [DATE],
	[CONTRACT_CURRENCY] [NVARCHAR](255),
	[PRODUCT_TERM] [NVARCHAR](255),
	[GUARANTEE_FUND_ID] [UNIQUEIDENTIFIER],
	[GUARANTEE_ID] [UNIQUEIDENTIFIER],
	[GUARANTEE_FUND_SHARE] [DECIMAL](15,6),
	[INSURANCE_SHARE] [DECIMAL](15,6),
	[BUDGET_RULE_ID] [UNIQUEIDENTIFIER],
	[MOTIVATION] [DECIMAL](15,6),
	[TOTAL_ACQUIS_SHARE] [DECIMAL](15,6),
	[RISK_FUND_GROUP_ID] [UNIQUEIDENTIFIER],
	[RISK_FUND_SHARE] [DECIMAL](15,6),
	[SKMARGIN] [DECIMAL](15,6),
	[OPTIONS_ID] [NVARCHAR](255),
	[HISTORICAL_PROFITABILITY_ID] [UNIQUEIDENTIFIER],
	[UNIT_INITIAL_COST] [DECIMAL](15,6)
		CONSTRAINT [PK_UL_PRODUCT_VERSION]
PRIMARY KEY CLUSTERED ([PRODUCT_VERSION_ID] ASC)
)
GO

ALTER TABLE [PAS_IMPL].[UL_PRODUCT_VERSION]  WITH CHECK ADD  CONSTRAINT [FK_PAS_IMPL_UL_PRODUCT_VERSION_GUARANTEE_FUND_ID] FOREIGN KEY([GUARANTEE_FUND_ID])
REFERENCES [PAS_IMPL].[UL_GUARANTEE_FUND] ([GUARANTEE_FUND_ID])
GO

ALTER TABLE [PAS_IMPL].[UL_PRODUCT_VERSION]  WITH CHECK ADD  CONSTRAINT [FK_PAS_IMPL_UL_PRODUCT_VERSION_RISK_FUND_GROUP_ID] FOREIGN KEY([RISK_FUND_GROUP_ID])
REFERENCES [PAS_IMPL].[UL_RISK_FUND_GROUP] ([RISK_FUND_GROUP_ID])
GO

ALTER TABLE [PAS_IMPL].[UL_PRODUCT_VERSION]  WITH CHECK ADD  CONSTRAINT [FK_PAS_IMPL_UL_PRODUCT_VERSION_HISTORICAL_PROFITABILITY_ID] FOREIGN KEY([HISTORICAL_PROFITABILITY_ID])
REFERENCES [PAS_IMPL].[UL_HISTORICAL_PROFITABILITY] ([HISTORICAL_PROFITABILITY_ID])
GO

ALTER TABLE [PAS_IMPL].[UL_PRODUCT_VERSION]  WITH CHECK ADD  CONSTRAINT [FK_PAS_IMPL_UL_PRODUCT_VERSION_GUARANTEE_ID] FOREIGN KEY([GUARANTEE_ID])
REFERENCES [PAS_IMPL].[UL_GUARANTEES] ([GUARANTEE_ID])
GO

-- CREATE HISTORY TABLE
CREATE TABLE [PAS_IMPL].[UL_PRODUCT_VERSION_HISTORY]
(
	[PRODUCT_VERSION_HISTORY_ID] [UNIQUEIDENTIFIER],
	[PRODUCT_VERSION_ID] [UNIQUEIDENTIFIER],
	[PRODUCT_MARKET_TYPE] [NVARCHAR](255),
	[STATUS] [NVARCHAR](255),
	[CREATION_DATE] [DATE],
	[APPROVAL_DATE] [DATE],
	[GUARANTEE_FUND_ID] [UNIQUEIDENTIFIER],
	[GUARANTEE_ID] [UNIQUEIDENTIFIER],
	[GUARANTEE_FUND_SHARE] [DECIMAL](15,6),
	[INSURANCE_SHARE] [DECIMAL](15,6),
	[BUDGET_RULE_ID] [UNIQUEIDENTIFIER],
	[MOTIVATION] [DECIMAL](15,6),
	[TOTAL_ACQUIS_SHARE] [DECIMAL](15,6),
	[RISK_FUND_GROUP_ID] [UNIQUEIDENTIFIER],
	[RISK_FUND_SHARE] [DECIMAL](15,6),
	[SKMARGIN] [DECIMAL](15,6),
	[OPTIONS_ID] [NVARCHAR](255),
	[HISTORICAL_PROFITABILITY_ID] [NVARCHAR](255),
	[UNIT_INITIAL_COST] [DECIMAL](15,6),
	[OPERATION] [NVARCHAR](1),
	CONSTRAINT [PK_UL_PRODUCT_VERSION_HISTORY]
PRIMARY KEY CLUSTERED ([PRODUCT_VERSION_HISTORY_ID] ASC)
)
GO

-- CREATE TRIGGER
CREATE TRIGGER [PAS_IMPL].[UL_PRODUCT_VERSION_HISTORY_TRIGGER]
ON [PAS_IMPL].[UL_PRODUCT_VERSION]
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
	DECLARE @operation NVARCHAR(1)
	IF EXISTS(SELECT *
	FROM inserted)
	  IF EXISTS(SELECT *
	FROM deleted)
	    SELECT @operation = 'U'
	ELSE
	    SELECT @operation = 'I'
	ELSE
		IF EXISTS(SELECT *
	FROM deleted)
    SELECT @operation = 'D'

	DECLARE @productVersionId UNIQUEIDENTIFIER;
	DECLARE @productMarketType NVARCHAR(255);
	DECLARE @status NVARCHAR(255);
	DECLARE @creationDate DATE;
	DECLARE @approvalDate DATE;
	DECLARE @guaranteeFundId UNIQUEIDENTIFIER;
	DECLARE @guaranteeId UNIQUEIDENTIFIER;
	DECLARE @guaranteeFundShare DECIMAL(15,6);
	DECLARE @insuranceShare DECIMAL(15,6);
	DECLARE @budgetRuleId UNIQUEIDENTIFIER;
	DECLARE @motivation DECIMAL(15,6);
	DECLARE @totalAcquisShare DECIMAL(15,6);
	DECLARE @riskFundGroupId  UNIQUEIDENTIFIER;
	DECLARE @riskFundShare DECIMAL(15,6);
	DECLARE @skmargin DECIMAL(15,6);
	DECLARE @optionsId NVARCHAR(255);
	DECLARE @paymentFrequency NVARCHAR(255);
	DECLARE @endowmentPaymentOptions NVARCHAR(255);
	DECLARE @productType NVARCHAR(255);
	DECLARE @productSubtype NVARCHAR(255);
	DECLARE @historicalProfitAbilityId NVARCHAR(255);
	DECLARE @unitInitialCost DECIMAL(15,6);


	IF @operation != 'D'
		SELECT
		@productVersionId = PRODUCT_VERSION_ID,
		@productMarketType = PRODUCT_MARKET_TYPE,
		@status = STATUS,
		@creationDate = CREATION_DATE,
		@approvalDate = APPROVAL_DATE,
		@guaranteeFundId = GUARANTEE_FUND_ID,
		@guaranteeId = GUARANTEE_ID,
		@guaranteeFundShare = GUARANTEE_FUND_SHARE,
		@insuranceShare = INSURANCE_SHARE,
		@budgetRuleId = BUDGET_RULE_ID,
		@motivation = MOTIVATION,
		@totalAcquisShare = TOTAL_ACQUIS_SHARE,
		@riskFundGroupId = RISK_FUND_GROUP_ID,
		@riskFundShare = RISK_FUND_SHARE,
		@skmargin = SKMARGIN,
		@optionsId = OPTIONS_ID,
		@historicalProfitAbilityId = HISTORICAL_PROFITABILITY_ID,
		@unitInitialCost = UNIT_INITIAL_COST

	FROM inserted
	ELSE
		SELECT
		@productVersionId = PRODUCT_VERSION_ID,
		@productMarketType = PRODUCT_MARKET_TYPE,
		@status = STATUS,
		@creationDate = CREATION_DATE,
		@approvalDate = APPROVAL_DATE,
		@guaranteeFundId = GUARANTEE_FUND_ID,
		@guaranteeId = GUARANTEE_ID,
		@guaranteeFundShare = GUARANTEE_FUND_SHARE,
		@insuranceShare = INSURANCE_SHARE,
		@budgetRuleId = BUDGET_RULE_ID,
		@motivation = MOTIVATION,
		@totalAcquisShare = TOTAL_ACQUIS_SHARE,
		@riskFundGroupId = RISK_FUND_GROUP_ID,
		@riskFundShare = RISK_FUND_SHARE,
		@skmargin = SKMARGIN,
		@optionsId = OPTIONS_ID,
		@historicalProfitAbilityId = HISTORICAL_PROFITABILITY_ID,
		@unitInitialCost = UNIT_INITIAL_COST

	FROM deleted

	INSERT INTO PAS_IMPL.UL_PRODUCT_VERSION_HISTORY
		(PRODUCT_VERSION_HISTORY_ID, PRODUCT_VERSION_ID, PRODUCT_MARKET_TYPE, STATUS, CREATION_DATE, APPROVAL_DATE, GUARANTEE_FUND_ID, GUARANTEE_ID, GUARANTEE_FUND_SHARE, INSURANCE_SHARE, BUDGET_RULE_ID, MOTIVATION, TOTAL_ACQUIS_SHARE, RISK_FUND_GROUP_ID, RISK_FUND_SHARE, SKMARGIN, OPTIONS_ID, HISTORICAL_PROFITABILITY_ID, UNIT_INITIAL_COST, OPERATION)
	VALUES
		(NEWID(), @productVersionId, @productMarketType, @status, @creationDate, @approvalDate, @guaranteeFundId, @guaranteeId, @guaranteeFundShare, @insuranceShare, @budgetRuleId, @motivation, @totalAcquisShare, @riskFundGroupId, @riskFundShare, @skmargin, @optionsId, @historicalProfitAbilityId, @unitInitialCost, @operation)



END

SET QUOTED_IDENTIFIER ON
GO

-- CREATE VIEW
CREATE VIEW [PAS_IMPL].[UL_PRODUCT_VERSION_VIEW]
AS
	SELECT
		[PRODUCT_VERSION_ID] AS PRODUCT_VERSION_ID,
		[STATUS] AS STATUS,
		[CREATION_DATE] AS CREATION_DATE,
		[APPROVAL_DATE] AS APPROVAL_DATE,
		[GUARANTEE_FUND_ID] AS GUARANTEE_FUND_ID,
		[GUARANTEE_ID] AS GUARANTEE_ID,
		[GUARANTEE_FUND_SHARE] AS GUARANTEE_FUND_SHARE,
		[INSURANCE_SHARE] AS INSURANCE_SHARE,
		[BUDGET_RULE_ID] AS BUDGET_RULE_ID,
		[MOTIVATION] AS MOTIVATION,
		[TOTAL_ACQUIS_SHARE] AS TOTAL_ACQUIS_SHARE,
		[RISK_FUND_GROUP_ID] AS RISK_FUND_GROUP_ID,
		[RISK_FUND_SHARE] AS RISK_FUND_SHARE,
		[SKMARGIN] AS SKMARGIN,
		[OPTIONS_ID] AS OPTIONS_ID,
		[HISTORICAL_PROFITABILITY_ID] AS HISTORICAL_PROFITABILITY_ID,
		[UNIT_INITIAL_COST] as UNIT_INITIAL_COST
	FROM [PAS_IMPL].[UL_PRODUCT_VERSION]
GO
INSERT INTO PAS_IMPL.UL_OBSERVATION_BARRIER
    (OBSERVATION_BARRIER_ID, CHECK_NUMBER, BARRIER_NAME, BARRIER_VALUE_PERS, PIP_COUPON)
VALUES
    --demo
    ( 'C0EEEBAA-0C20-42BA-B9F8-A3D48C1D5771', 1, N'Купонный барьер', 100, NULL),
    ( '601D57F8-A066-4B55-AC9A-ADE382E724D2', 2, N'Купонный барьер', 100, NULL),
    --preEquity
    ( '321ED43B-B1A1-4979-BF40-256BD54C9D2A', NULL, NULL, NULL, NULL)

INSERT INTO PAS_IMPL.UL_BARRIER_TYPE
    (BARRIER_TYPE_ID, BARRIER_NAME, OBSERVATION_FREQUENCY, MORATORIUM_END_CHECK_NUMBER)
VALUES
    --demo
    ('02086FF4-A4FA-4866-A4D3-E04E9D2A8682', N'Купонный барьер', N'Раз в год', NULL),
    --preEquity
    ('89C3D117-9C37-472B-B611-78C34437A9FD', NULL, NULL, NULL)

INSERT INTO PAS_IMPL.UL_PAY_OFF
    (PAY_OFF_ID, PAY_OFF_TYPE, TERM, STRIKE, GUARAN_COUPON, ADDITIONAL_INCOME, BARRIER_TYPE_ID, OBSERVATION_BARRIER_ID, PROTECTION_TYPE)
VALUES
    --demo
    ('4A1A3B05-74C2-43DB-9971-A18FBD6F4AA1', N'Акция', 2, 100, N'Нет', N'Да','02086FF4-A4FA-4866-A4D3-E04E9D2A8682', 'C0EEEBAA-0C20-42BA-B9F8-A3D48C1D5771', N'Нет'),
    --preEquity
    ('BEA3A5BB-959A-45CE-B75A-799ADC5A6D41', N'Акция', NULL, 100, N'Нет', N'Да', '89C3D117-9C37-472B-B611-78C34437A9FD', '321ED43B-B1A1-4979-BF40-256BD54C9D2A', N'Нет')

INSERT INTO PAS_IMPL.UL_STOCKS
    (MIC, OPERATING_MIC, OPRT_SGMT, MARKET_NAME, ISO_COUNTRY_CODE, CITY, WEBSITE, STATUS, COMMENTS)
VALUES
    --common
    ('MISX', 'MISX', 'OPRT', 'MOSCOW EXCHANGE - ALL MARKETS', 'RU', 'MOSCOW', 'WWW.MOEX.COM', 'ACTIVE', 'EQUITIES, BONDS, CURRENCIES, MONEY MARKET INSTRUMENTS, COMMODITIES AND MOEX BOARD.')

INSERT INTO PAS_IMPL.UL_TOOLS
    (TOOL_ID, TOOL_NAME, STOCK_TICKER, ISIN, TARIFF_RATE_CURRENCY, STOCK_NAME, MIC, ADDITIONAL_INCOME, TOOL_TYPE, TICKER_BLOOMBERG, NUMBER_CBONDS)
VALUES
    --demo
    (N'0DA66E61-A391-4350-9904-1A1258520EFA', N'Яндекс', N'YNDX', N'NL0009805522', N'RUB', N'MOSCOW EXCHANGE - ALL MARKETS', N'MISX', N'Да', N'Акция', N'YNDX RM EQUITY', NULL),
    (N'C64749FC-5F7E-48F0-955B-F2F92D4AA9FF', N'Яндекс2', N'YNDX2', N'NL0009805523', N'RUB', N'MOSCOW EXCHANGE - ALL MARKETS', N'MISX', N'Да', N'Облигация', N'YNDX RM EQUITY2', NULL),
    --preEquity
    (N'1A37E566-4F0B-4410-B64C-064F3E284D0D', N'Абрау-Дюрсо, акция об.', N'ABRD', N'RU000A0JS5T7', N'RUB', N'Московская Биржа', N'MISX', NULL, N'Акция', NULL, NULL),
    (N'488F05A1-2AAD-4406-ACCE-CAC12CBA1215', N'Авангард АКБ, акция об.', N'AVAN', N'RU000A0DM7B3', N'RUB', N'Московская Биржа', N'MISX', NULL, N'Акция', NULL, NULL),
    (N'4A5990B4-FBB7-4B85-8FED-742B463C9CF6', N'АКБ Приморье, акция об.', N'PRMB', N'RU000A0DPNQ5', N'RUB', N'Московская Биржа', N'MISX', NULL, N'Акция', NULL, NULL),
    (N'4D9C9CD4-2AD4-41D0-B661-DC30C38F9DAC', N'Акрон, акция об.', N'AKRN', N'RU0009028674', N'RUB', N'Московская Биржа', N'MISX', NULL, N'Акция', NULL, NULL),
    (N'57DBCF06-DDCF-4CC4-937C-5A1AAF936799', N'Алкогольная группа Кристалл, акция об.', N'KLVZ', N'RU000A107KX0', N'RUB', N'Московская Биржа', N'MISX', NULL, N'Акция', NULL, NULL),
    (N'5C1FFA99-B1D7-4D08-B9C8-4659769F6464', N'АЛРОСА, акция об.', N'ALRS', N'RU0007252813', N'RUB', N'Московская Биржа', N'MISX', NULL, N'Акция', NULL, NULL),
    (N'5E9CAD0E-17A7-4667-971C-0C66F445F1FC', N'АПРИ, акция об.', N'APRI', N'RU000A108LJ5', N'RUB', N'Московская Биржа', N'MISX', NULL, N'Акция', NULL, NULL),
    (N'6FC1BF73-9544-487D-841C-4204396B5F71', N'Аптечная сеть 36.6, акция об.', N'APTK', N'RU0008081765', N'RUB', N'Московская Биржа', N'MISX', NULL, N'Акция', NULL, NULL),
    (N'73210665-A9AA-47AE-898B-089B47BE8EC6', N'Артген Биотех, акция об.', N'ABIO', N'RU000A0JNAB6', N'RUB', N'Московская Биржа', N'MISX', NULL, N'Акция', NULL, NULL),
    (N'7CD96AE0-D205-4CB7-AC5C-A81BB3BF6AAA', N'АСКО, акция об.', N'ACKO', N'RU000A0JXS91', N'RUB', N'Московская Биржа', N'MISX', NULL, N'Акция', NULL, NULL),
    (N'7DEF5D99-85FB-480D-88CA-FAB8BF3F2ACB', N'Астраханская ЭСК, акция об.', N'ASSB', N'RU000A0D8MM8', N'RUB', N'Московская Биржа', N'MISX', NULL, N'Акция', NULL, NULL),
    (N'83AE7DB7-B493-400B-95D6-63E72003CEE6', N'АФК Система, акция об.', N'AFKS', N'RU000A0DQZE3', N'RUB', N'Московская Биржа', N'MISX', NULL, N'Акция', NULL, NULL),
    (N'8632C716-664F-4CCC-AF17-710B0C115576', N'Ашинский метзавод, акция об.', N'AMEZ', N'RU000A0B88G6', N'RUB', N'Московская Биржа', N'MISX', NULL, N'Акция', NULL, NULL),
    (N'8C8286F0-FBD2-49B7-851C-EA3CB3690CC2', N'Аэрофлот, акция об.', N'AFLT', N'RU0009062285', N'RUB', N'Московская Биржа', N'MISX', NULL, N'Акция', NULL, NULL),
    (N'9A83FD8D-5EC4-4436-B729-E5793759B478', N'Банк ВТБ (ПАО), акция об.', N'VTBR', N'RU000A0JP5V6', N'RUB', N'Московская Биржа', N'MISX', NULL, N'Акция', NULL, NULL),
    (N'9AB33A39-D946-4386-9835-8903724F535B', N'Банк Кузнецкий, акция об.', N'KUZB', N'RU000A0JSQ66', N'RUB', N'Московская Биржа', N'MISX', NULL, N'Акция', NULL, NULL),
    (N'A300DA0A-9FE7-4D63-A608-3A24AFC2D7D7', N'Банк Санкт-Петербург, акция об.', N'BSPB', N'RU0009100945', N'RUB', N'Московская Биржа', N'MISX', NULL, N'Акция', NULL, NULL)

INSERT INTO PAS_IMPL.UL_BASIC_ASSETS_GROUP
    (BASIC_ASSETS_GROUP_ID)
VALUES
    --demo
    ('75F4B548-EF8A-4313-A2DF-ED4B9C363E27'),
    --preEquity
    ('6DAA3737-3E8D-4514-A769-70DD4CB57096')

INSERT INTO PAS_IMPL.UL_BASIC_ASSETS
    (BASIC_ASSET_ID, BASIC_ASSETS_GROUP_ID, MARKETING_ASSET_NAME, TOOL_ID)
VALUES
    --demo
    ('7F463478-8DAD-42C2-9D1C-478ABA08DD35', '75F4B548-EF8A-4313-A2DF-ED4B9C363E27', N'Акции - Яндекс', '0DA66E61-A391-4350-9904-1A1258520EFA'),
    ('24B253B4-8C44-4DF2-97EB-62A83169FD49', '75F4B548-EF8A-4313-A2DF-ED4B9C363E27', N'Акции - Яндекс 2', 'C64749FC-5F7E-48F0-955B-F2F92D4AA9FF'),
    --preEquity
    ('038AC706-1279-4E0B-BAC2-90EF2AC7B648', '6DAA3737-3E8D-4514-A769-70DD4CB57096', N'Абрау-Дюрсо, акция об.', '1A37E566-4F0B-4410-B64C-064F3E284D0D'),
    ('12CE55E4-F185-4E54-9D8D-C8D4AA968B61', '6DAA3737-3E8D-4514-A769-70DD4CB57096', N'Авангард АКБ, акция об.', '488F05A1-2AAD-4406-ACCE-CAC12CBA1215'),
    ('15910476-9063-4CE0-803A-835FF40C131C', '6DAA3737-3E8D-4514-A769-70DD4CB57096', N'АКБ Приморье, акция об.', '4A5990B4-FBB7-4B85-8FED-742B463C9CF6'),
    ('28800F3D-4E84-4D4C-8EDF-6FBA5966E066', '6DAA3737-3E8D-4514-A769-70DD4CB57096', N'Акрон, акция об.', '4D9C9CD4-2AD4-41D0-B661-DC30C38F9DAC'),
    ('32426008-0611-4953-9F90-A624D4AFFE9D', '6DAA3737-3E8D-4514-A769-70DD4CB57096', N'Алкогольная группа Кристалл, акция об.', '57DBCF06-DDCF-4CC4-937C-5A1AAF936799'),
    ('473EBB95-12A3-4D6C-851B-0B026662621F', '6DAA3737-3E8D-4514-A769-70DD4CB57096', N'АЛРОСА, акция об.', '5C1FFA99-B1D7-4D08-B9C8-4659769F6464'),
    ('4B7FFF13-043D-44A6-ACBE-68B788066639', '6DAA3737-3E8D-4514-A769-70DD4CB57096', N'АПРИ, акция об.', '5E9CAD0E-17A7-4667-971C-0C66F445F1FC'),
    ('503DB232-476C-4F01-B5D4-0CF430D122C6', '6DAA3737-3E8D-4514-A769-70DD4CB57096', N'Аптечная сеть 36.6, акция об.', '6FC1BF73-9544-487D-841C-4204396B5F71'),
    ('59DA0C7C-B64D-4E10-8231-162907B1AC41', '6DAA3737-3E8D-4514-A769-70DD4CB57096', N'Артген Биотех, акция об.', '73210665-A9AA-47AE-898B-089B47BE8EC6'),
    ('5D768578-E8BF-48AB-A88A-3B3D90B4FD71', '6DAA3737-3E8D-4514-A769-70DD4CB57096', N'АСКО, акция об.', '7CD96AE0-D205-4CB7-AC5C-A81BB3BF6AAA'),
    ('5D965116-6483-43C8-98A0-CF729CB87BD5', '6DAA3737-3E8D-4514-A769-70DD4CB57096', N'Астраханская ЭСК, акция об.', '7DEF5D99-85FB-480D-88CA-FAB8BF3F2ACB'),
    ('652BC5A4-4C57-48C6-AA7B-074A0142F621', '6DAA3737-3E8D-4514-A769-70DD4CB57096', N'АФК Система, акция об.', '83AE7DB7-B493-400B-95D6-63E72003CEE6'),
    ('6947B47A-FF5C-436E-AE43-C05BC381858F', '6DAA3737-3E8D-4514-A769-70DD4CB57096', N'Ашинский метзавод, акция об.', '8632C716-664F-4CCC-AF17-710B0C115576'),
    ('71F984EA-0F29-45BD-B4ED-AD4DA0E40DE7', '6DAA3737-3E8D-4514-A769-70DD4CB57096', N'Аэрофлот, акция об.', '8C8286F0-FBD2-49B7-851C-EA3CB3690CC2'),
    ('8CBDB2BC-85E9-443B-A507-EB292A6DE02A', '6DAA3737-3E8D-4514-A769-70DD4CB57096', N'Банк ВТБ (ПАО), акция об.', '9A83FD8D-5EC4-4436-B729-E5793759B478'),
    ('8FA10820-5C37-4E8E-B262-220B8F2A886F', '6DAA3737-3E8D-4514-A769-70DD4CB57096', N'Банк Кузнецкий, акция об.', '9AB33A39-D946-4386-9835-8903724F535B'),
    ('9448821D-7860-46A7-BE03-05B1B9B18EBC', '6DAA3737-3E8D-4514-A769-70DD4CB57096', N'Банк Санкт-Петербург, акция об.', 'A300DA0A-9FE7-4D63-A608-3A24AFC2D7D7')

INSERT INTO PAS_IMPL.UL_PIP_RF
    (PIP_RF_ID, PIP_CATEGORY, PAY_OFF_ID, BASIC_ASSETS_GROUP_ID, TARIFF_RATE_CURRENCY, IS_PIP_QUANTUMED, MFEE)
VALUES
    --demo
    ('6CE20C42-9E55-49D8-91C3-982559D30C96', N'Рыночный', '4A1A3B05-74C2-43DB-9971-A18FBD6F4AA1', '75F4B548-EF8A-4313-A2DF-ED4B9C363E27', 'RUB', N'Нет', 0 ),
    ('42D89D9C-60A1-4FE1-A11F-97C76FDFE5CA', N'Рыночный', '4A1A3B05-74C2-43DB-9971-A18FBD6F4AA1', '75F4B548-EF8A-4313-A2DF-ED4B9C363E27', 'RUB', N'Нет', 0 ),
    --preEquity
    ('179B3C2D-69A4-47C3-A691-52FB989B9092', N'Рыночный', 'BEA3A5BB-959A-45CE-B75A-799ADC5A6D41', '6DAA3737-3E8D-4514-A769-70DD4CB57096', 'RUB', N'Нет', 3 )

INSERT INTO PAS_IMPL.UL_CASH
    (CASH_ID, CASH_TYPE, STARTING_QUOTATION, RATE, CURRENCY)
VALUES
    --demo
    ('EC55A0BF-1B82-4970-A48B-E53365CCA98E', N'Овернайт', 0, NULL, 'RUB'),
    --preEquity
    ('07FC8E8E-D2A5-4D38-A041-4FD61082CAB6', N'Овернайт', 45545, NULL, 'RUB')

INSERT INTO PAS_IMPL.UL_RISK_FUND_GROUP
    (RISK_FUND_GROUP_ID)
VALUES
    --demo
    ('D586E66D-CBC5-4321-953D-CD49DE2D05B9'),
    --preEquity
    ('561F988A-AAFB-41AB-BC9A-9F97857AE5F8')

INSERT INTO PAS_IMPL.UL_RISK_FUND
    (RISK_FUND_ID, RISK_FUND_GROUP_ID, PIP_RF_ID, PIP_SHARE, PIP_TARIFF_QUOTATION, KU_SIZE, COUPON_SIZE, CASH_ID)
VALUES
    --demo
    ('812A988A-3790-4398-9DD2-0F6AB79CBC7A', 'D586E66D-CBC5-4321-953D-CD49DE2D05B9', '6CE20C42-9E55-49D8-91C3-982559D30C96', 0.83, NULL, 0.08, 0.0267, 'EC55A0BF-1B82-4970-A48B-E53365CCA98E'),
    ('323D3EAC-D318-4B8F-8FE9-4DFF74654043', 'D586E66D-CBC5-4321-953D-CD49DE2D05B9', '42D89D9C-60A1-4FE1-A11F-97C76FDFE5CA', 0.17, 0.0160, NULL, NULL, 'EC55A0BF-1B82-4970-A48B-E53365CCA98E'),
    --preEquity
    ('0E5C84AD-5D4D-4A4F-8BB9-1CD51E96D8C7', '561F988A-AAFB-41AB-BC9A-9F97857AE5F8', '179B3C2D-69A4-47C3-A691-52FB989B9092', NULL, NULL, NULL, NULL, '07FC8E8E-D2A5-4D38-A041-4FD61082CAB6')

INSERT INTO PAS_IMPL.UL_RATES
    (RATE_ID, RATE_TYPE, BEGIN_DATE, END_DATE, CURRENCY, TERM, RATE_VALUE)
VALUES
    --demo
    ('BE618C9E-17AC-4F4B-8E52-E995D124E853', N'Корп', NULL, NULL, 'RUB', 3, 0.11),
    --preEquity
    ('5ADC4723-76F6-464D-9A3A-295556B1759A', NULL, NULL, NULL, NULL, NULL, NULL)

INSERT INTO PAS_IMPL.UL_RATE_MIX
    (RATE_MIX_ID, RATE_ID, RATE_SHARE)
VALUES
    --demo
    ('5E4DBE86-24DC-46D3-8EDC-83D3D3651F09', 'BE618C9E-17AC-4F4B-8E52-E995D124E853', 0.5),
    --preEquity
    ('582EF753-EA38-4A83-AA37-55E3AFE370B6', '5ADC4723-76F6-464D-9A3A-295556B1759A', NULL)

INSERT INTO PAS_IMPL.UL_PIP_GF
    (PIP_GF_ID, RATE_MIX_ID, MFEE, TARIFF_RATE, CURRENCY)
VALUES
    --demo
    ('D19CAFB0-14AE-456A-B330-7C5C45CA9C86', '5E4DBE86-24DC-46D3-8EDC-83D3D3651F09', 0, 0.10, 'RUB'),
    --preEquity
    ('CF1BF204-C48C-436A-BE3E-76355F1882C2', '582EF753-EA38-4A83-AA37-55E3AFE370B6', NULL, NULL, NULL)

INSERT INTO PAS_IMPL.UL_GUARANTEE_FUND
    (GUARANTEE_FUND_ID, PIP_GF_ID, PIP_SHARE, PIP_TARIFF_QUOTATION)
VALUES
    --demo
    ('93C69538-72C9-4627-90F3-52FE4C09BEC5', 'D19CAFB0-14AE-456A-B330-7C5C45CA9C86', 0, 0.10),
    --preEquity
    ('7B45D209-4FE2-471D-B12D-36612681B37F', 'CF1BF204-C48C-436A-BE3E-76355F1882C2', NULL, NULL)

INSERT INTO PAS_IMPL.UL_GUARANTEE_DATES
    (GUARANTEE_DATES_ID, OBSERVATION_NUMBER, BARRIER_NAME)
VALUES
    --demo
    ('676F6779-01B1-444C-ABC9-3F4DAC3AEC1A', 1, N'Функция фиксации'),
    --preEquity
    ('74659D33-5ABA-4D35-9DE6-2111D3FE864B', NULL, NULL)

INSERT INTO PAS_IMPL.UL_GUARANTEES
    (GUARANTEE_ID, TARIFF_RATE_CURRENCY, CAPITAL_PROTECTION, GUARANTEED_COUPON, GUARANTEED_COUPON_FREQUENCY, GUARANTEE_DATES_ID)
VALUES
    --demo
    ('D3F715FE-14DB-4783-AE47-2A8C4540FA92', 'RUB', 1, 0, NULL, '676F6779-01B1-444C-ABC9-3F4DAC3AEC1A'),
    --preEquity
    ('0858DB6C-0801-44FF-A645-BBC9CACFBE94', NULL, NULL, NULL, NULL, '74659D33-5ABA-4D35-9DE6-2111D3FE864B')

INSERT INTO PAS_IMPL.UL_HISTORICAL_PROFITABILITY
    (HISTORICAL_PROFITABILITY_ID, PERIOD_BEGIN_DATE, PERIOD_END_DATE, PRODUCT_TYPE, TERM, CURRENCY, INSTALLMENT_TYPE, PAYMENT_TYPE, PROFITABILITY, PROFITABILITY_TEXT, UPDATED_DATE, ASSET_TYPE)
VALUES
    --demo
    ('632FC4F5-A0F9-409C-A4F9-4C500395F150', '2022-01-01', '2023-04-04', N'ИСЖ', 3, 'RUB', N'Единовременно', N'в конце', 0.0465, NULL, '2022-05-04', N'Индекс, корзина акций'),
    --preEquity
    ('8A3D92BF-B949-4552-A8B8-0642B7B8AB79', '2024-01-01', '2024-12-31', N'ИСЖ', 5, 'RUB', N'Единовременно', N'регулярно', NULL, N'Расчет доходности невозможен в силу отсутствия договоров с участием Страхователя в инвестиционном доходе Страховщика, по которым обязательства по уплате страховой суммы по риску Дожитие за 3 (три) календарных года, предшествующих заключению настоящего договора, прекращены исполнением и которые содержат условия, аналогичные заключаемому договору.', '2024-09-13', N'Индекс, корзина акций')

INSERT INTO PAS_IMPL.UL_INVESTMENT_OBSERVATION_DATES
    (INVESTMENT_OBSERVATION_DATES_ID, TRANSH_TYPE)
VALUES
    --demo
    ('A1D72FA8-3631-424B-BDDE-AC22B0A26225', N'Ежедневное инвестирование'),
    --preEquity
    ('DBFBE7C2-1115-4E34-A596-418D8B39BCC3', N'Ежедневное инвестирование')

INSERT INTO PAS_IMPL.UL_PRODUCTS
    (UL_PRODUCT_ID, PRODUCT_ID, PRODUCT_VERSION_ID, INVESTMENT_OBSERVATION_DATES_ID)
VALUES
    --demo
    ('2355BCDE-7277-4943-B8A9-449D56446F3F', N'03dc693c-4e5f-4dd2-89a1-8146518f0345', '7127997E-A88C-4F29-8A88-ECB2A9AC3B15', 'A1D72FA8-3631-424B-BDDE-AC22B0A26225'),
    --preEquity
    ('7FC733E6-AFB9-4E5B-9A3A-72DA66678440', N'7f55f8e1-2275-4736-abae-7bcfbf626ce5', 'F11ACCCA-35C0-45E1-B10A-24475D3DE6CE', 'DBFBE7C2-1115-4E34-A596-418D8B39BCC3')

INSERT INTO PAS_IMPL.UL_PRODUCT_VERSION
    (PRODUCT_VERSION_ID, PRODUCT_MARKET_TYPE, STATUS, CREATION_DATE, APPROVAL_DATE, GUARANTEE_FUND_ID, GUARANTEE_ID, GUARANTEE_FUND_SHARE, INSURANCE_SHARE, MOTIVATION, TOTAL_ACQUIS_SHARE, RISK_FUND_GROUP_ID, RISK_FUND_SHARE, SKMARGIN, OPTIONS_ID, HISTORICAL_PROFITABILITY_ID, UNIT_INITIAL_COST)
VALUES
    --demo
    ('7127997E-A88C-4F29-8A88-ECB2A9AC3B15', N'Базис Инвест', N'Черновик', '2023-03-28', NULL, '93C69538-72C9-4627-90F3-52FE4C09BEC5', 'D3F715FE-14DB-4783-AE47-2A8C4540FA92', 0.8537, 0, 0, 0, 'D586E66D-CBC5-4321-953D-CD49DE2D05B9', 0.1463, 0, N'Продавай ежегодно ПИП РФ на сумму РФ первоначальный/срок', '632FC4F5-A0F9-409C-A4F9-4C500395F150', 1000),
    --preEquity
    ('F11ACCCA-35C0-45E1-B10A-24475D3DE6CE', N'ИСЖ 2.0', N'Черновик', '2024-09-13', NULL, NULL, NULL, NULL, 1.87, 0.50, 4.78, '561F988A-AAFB-41AB-BC9A-9F97857AE5F8', 90, 2, N'Списание Mf ежеквартально по мере наличия д/с', '8A3D92BF-B949-4552-A8B8-0642B7B8AB79', 1000)
