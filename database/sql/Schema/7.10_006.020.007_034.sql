alter table ACC.JR_ADDITIONAL_ATTRIBUTES add BANK_STATEMENT_ITEM_ID bigint null constraint FK_ACC_BANK_STATEMENT_ITEM_ID foreign key references ACC_IMPL.BANK_STATEMENT_ITEM (BANK_STATEMENT_ITEM_ID);
alter table ACC.JR_ADDITIONAL_ATTRIBUTES add COMMISSION_ACT_ID bigint null constraint FK_ACC_COMMISSION_ACT_ID foreign key references ACC_IMPL.CA_ACT (ACT_ID);
alter table ACC.JR_ADDITIONAL_ATTRIBUTES add CONTRACT_NUMBER nvarchar(64) null constraint FK_PAS_CONTRACT_NUMBER foreign key references PAS.CONTRACT (CONTRACT_NUMBER);
alter table ACC.JR_ADDITIONAL_ATTRIBUTES add PAYMENT_ORDER_NUMBER nvarchar(64) null constraint FK_ACC_PAYMENT_ORDER_NUMBER foreign key references ACC.PAYMENT_ORDER (PAYMENT_ORDER_NUMBER);

CREATE TABLE [ACC_IMPL].[CT_PERIOD_TYPE](
	[PERIOD_TYPE_ID] int PRIMARY KEY,
	[DESCRIPTION] [nvarchar](250) NOT NULL
)
GO

CREATE TABLE [ACC_IMPL].[PERIOD](
	[PERIOD_ID] [bigint] NOT NULL,
	[PERIOD_TYPE_ID] [int] NOT NULL,
	[PERIOD_STATUS_ID] [int] NOT NULL,
	[DESCRIPTION] [nvarchar](250) NOT NULL,
	[START_DATE] [date] NOT NULL,
	[END_DATE] [date] NOT NULL,

	CONSTRAINT [PK_ACC_PERIOD] PRIMARY KEY CLUSTERED (PERIOD_ID)
)
GO

ALTER TABLE [ACC_IMPL].[PERIOD] WITH CHECK ADD CONSTRAINT [FK_ACC_IMPL_PERIOD_PERIOD_STATUS_ID] FOREIGN KEY([PERIOD_STATUS_ID])
REFERENCES [ACC].[CT_PERIOD_STATUS] ([PERIOD_STATUS_ID])
GO

ALTER TABLE [ACC_IMPL].[PERIOD] CHECK CONSTRAINT [FK_ACC_IMPL_PERIOD_PERIOD_STATUS_ID]
GO

ALTER TABLE [ACC_IMPL].[PERIOD] WITH CHECK ADD CONSTRAINT [FK_ACC_IMPL_PERIOD_PERIOD_TYPE_ID] FOREIGN KEY([PERIOD_TYPE_ID])
REFERENCES [ACC_IMPL].[CT_PERIOD_TYPE] ([PERIOD_TYPE_ID])
GO

ALTER TABLE [ACC_IMPL].[PERIOD] CHECK CONSTRAINT [FK_ACC_IMPL_PERIOD_PERIOD_TYPE_ID]
GO

INSERT INTO ACC_IMPL.CT_PERIOD_TYPE (PERIOD_TYPE_ID, DESCRIPTION)
VALUES
(1, 'Contract'),
(2, 'Payment'),
(3, 'Commission act'),
(4, 'Payment order')
GO

INSERT INTO ACC.PERIOD(PERIOD_STATUS_ID, DESCRIPTION, START_DATE, END_DATE, SYS_CREATED_ON, SYS_UPDATED_ON, SYS_CREATED_BY_ID, SYS_UPDATED_BY_ID)
select
	p.PERIOD_STATUS_ID,
	p.DESCRIPTION,
	p.START_DATE,
	p.END_DATE,
	p.SYS_CREATED_ON,
	p.SYS_UPDATED_ON,
	p.SYS_CREATED_BY_ID,
	p.SYS_UPDATED_BY_ID
from
	acc.PERIOD p,
	(select 1 as period_type_id union select 2 union select 3) t
where p.description not in ('Closed period', 'Open period - all', 'Open period - blocked sales invoice')
GO

insert into acc_impl.PERIOD (PERIOD_ID, PERIOD_TYPE_ID, PERIOD_STATUS_ID, DESCRIPTION, START_DATE, END_DATE)
select
	p.PERIOD_ID,
	rank() over (partition by p.description order by p.period_id) as PERIOD_TYPE_ID,
	p.PERIOD_STATUS_ID,
	p.DESCRIPTION,
	p.START_DATE,
	p.END_DATE
from acc.period p
where p.description not in ('Closed period', 'Open period - all', 'Open period - blocked sales invoice')
order by p.DESCRIPTION, p.PERIOD_ID
GO
